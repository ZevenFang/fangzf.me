{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"002fc8b89eaa77ed6fc9cb8f5a5ca7acb4e7d248","modified":1494423227571},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1494423227586},{"_id":"themes/yelee/_config.yml","hash":"6741f18a22fba106de4ac1beb9c61c1c39bb052a","modified":1494423473180},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1494423227602},{"_id":"source/_posts/Android应用签名.md","hash":"b8e184937d7fc8866654116143adcacf1378e39a","modified":1494423227571},{"_id":"source/_posts/Finder-在当前目录打开-iTerm2.md","hash":"b9c4d7fdb2669f3b6bb1bc8b5ae944d2192acabc","modified":1494423227571},{"_id":"source/_posts/PHP-header-函数.md","hash":"c6104d064659ce853a1b3281c6e974cde54884e4","modified":1494423227571},{"_id":"source/_posts/MySQL触发器.md","hash":"75c97c45c5b3780efb5715f5b813477a7573d8be","modified":1494423227571},{"_id":"source/_posts/PHP防盗链技术.md","hash":"77e4316254a888f8b7d0d59023ee99dee113dc87","modified":1494423227571},{"_id":"source/_posts/MySQL用户授权.md","hash":"cc96645f1ea61738bf9a16be1e217a04b26f2368","modified":1494423227571},{"_id":"source/_posts/ReactNative从设备上访问开发服务器.md","hash":"43fc82764155fe8f8e2fe3d89cbf11384998dd5b","modified":1494423227571},{"_id":"source/_posts/Ubuntu常用命令及快捷键.md","hash":"3d45872311b029e6d86b5f23bb1010a3a8c77986","modified":1494423227586},{"_id":"source/_posts/Xcode-离线下载地址.md","hash":"c85c8c1914ddb9faf593cba0b942780db351cf13","modified":1494423227586},{"_id":"source/_posts/mongodb的基本操作（CRUD）.md","hash":"1b7074e6388d4b557338cc65ada934199c0e8860","modified":1494423227586},{"_id":"source/_posts/html5自定义表单提示.md","hash":"91633b45fce0c814fbc9ab940ac17f58edcfa535","modified":1494423227586},{"_id":"source/_posts/ubuntu搭建git服务器.md","hash":"925ccf82bd734d589bf5dadfb69498909b2168a8","modified":1494423227586},{"_id":"source/_posts/ubuntu搭建svn服务器.md","hash":"72e8182e7cb2a588816eba88d79119731a85f27c","modified":1494423227586},{"_id":"source/_posts/使用-FormData-上传文件.md","hash":"9fe1469da1df146a2a4e5df42313de8fc5d4b03c","modified":1494691459431},{"_id":"source/_posts/使用-XMLHttpRequest-发送-Ajax.md","hash":"985a9e6da0417904728e96375ace6cd910d771a9","modified":1494683653142},{"_id":"source/_posts/前端技术资源合集.md","hash":"7b1e3b5054b6f4bce06a76c657427ebde855f080","modified":1494423227586},{"_id":"source/_posts/更新Github-fork后的项目代码.md","hash":"717df178d8805b97e1b35a4c66e171d90df7e846","modified":1494423227586},{"_id":"source/_posts/简易搭建mongodb.md","hash":"359099d5e7f1cb0d78fd6302dd2b0b7df68e67ed","modified":1494423227586},{"_id":"source/_posts/让-Zsh-终端走代理.md","hash":"9f0760195bf88745e820b49f9f924ebdbe774588","modified":1494423227586},{"_id":"source/_posts/连接Redux调试服务器.md","hash":"15dfb8cbb435f9e2c8eb1f39b5e433932932ef67","modified":1494423227586},{"_id":"source/_posts/让Finder标题显示当前路径.md","hash":"3bb2a9f5df444e8e765394be92de560d7794e06c","modified":1494423227586},{"_id":"source/_posts/部署Meteor应用到服务器.md","hash":"d7852b54debbc37e282674ed38e101b92cc3108c","modified":1494423227586},{"_id":"themes/yelee/languages/default.yml","hash":"8bb52c610364eccd1e0eaab20a407b831418ec48","modified":1494423227586},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1494423227586},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1494423227586},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1494423227586},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1494423227586},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1494423227602},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1494423227602},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1494423227602},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1494423227602},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494423227602},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494423227602},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1494423227602},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"a23579846a5c74ceb2b595fbf65af6010edb1cbb","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"2583dfe41a201b5002597885c89b9cf5ed3fbfc4","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1494423227602},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1494423227602},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1494423227602},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1494423227618},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1494423227620},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1494423227623},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1494423227624},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1494423227624},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1494423227624},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1494423227624},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1494423227624},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1494423227624},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1494423227624},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1494423227624},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1494423227624},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1494423227624},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1494423227624},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1494423227624},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1494423227624},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1494423227624},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1494423227624},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1494423227624},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1494423227640},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1494423227640},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1494423227640},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1494423227640},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1494423227640},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1494423227640},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1494423227640},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1494423227640},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1494423227640},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1494423227640},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1494423227640},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1494423227640},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1494423227621},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1494423227623},{"_id":"themes/yelee/source/img/avatar.png","hash":"bad74c7c55d50088f3adf908ed88686c133a30fb","modified":1494423227624},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/comments/livere.ejs","hash":"dc5cf8cfcc0840c5a18e373abeeddd1312a6e5aa","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1494423227586},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1494423227602},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1494423227602},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1494423227602},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1494423227602},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1494423227602},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1494423227602},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1494423227624},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1494423227624},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1494423227624}],"Category":[{"name":"Mac","_id":"cj2ngphzd00053ghgm6g5xnot"},{"name":"Database","_id":"cj2ngphzj000b3ghg54ehywxd"},{"name":"Front","_id":"cj2ngphzt000m3ghge2cl4hlw"},{"name":"Linux","_id":"cj2ngphzy000v3ghgqkb4sg2q"},{"name":"Backend","_id":"cj2ngpi0m001t3ghgco230bdh"}],"Data":[],"Page":[{"_content":"## Welcome to my blog!\nHere is Zeven's blog source, you can see the markdown source on [github](https://github.com/ZevenFang).\n\nHope it can help you. : )\n","source":"README.md","raw":"## Welcome to my blog!\nHere is Zeven's blog source, you can see the markdown source on [github](https://github.com/ZevenFang).\n\nHope it can help you. : )\n","date":"2017-05-10T13:33:47.571Z","updated":"2017-05-10T13:33:47.571Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cj2ngphwx00003ghggyt6j12x","content":"<h2 id=\"Welcome-to-my-blog\"><a href=\"#Welcome-to-my-blog\" class=\"headerlink\" title=\"Welcome to my blog!\"></a>Welcome to my blog!</h2><p>Here is Zeven’s blog source, you can see the markdown source on <a href=\"https://github.com/ZevenFang\" target=\"_blank\" rel=\"external\">github</a>.</p>\n<p>Hope it can help you. : )</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Welcome-to-my-blog\"><a href=\"#Welcome-to-my-blog\" class=\"headerlink\" title=\"Welcome to my blog!\"></a>Welcome to my blog!</h2><p>Here is Zeven’s blog source, you can see the markdown source on <a href=\"https://github.com/ZevenFang\" target=\"_blank\" rel=\"external\">github</a>.</p>\n<p>Hope it can help you. : )</p>\n"}],"Post":[{"title":"Android应用签名","date":"2016-12-21T02:07:40.000Z","description":"三步走：生成密钥，签名apk，优化APK","_content":"\n### 生成密钥\n```\nkeytool -genkey -v -keystore app-release-key.keystore -alias app-release-key.keystore -keyalg RSA -keysize 2048 -validity 10000\n```\n### 签名apk\n```\njarsigner -verbose -sigalg SHA256withRSA -tsa https://timestamp.geotrust.com/tsa -digestalg SHA1 -keystore app-release-key.keystore app-release-unsigned.apk app-release-key.keystore\n```\n### 优化APK\n```\nzipalign -v 4 app-release-unsigned.apk app-1.0.0.apk\n```\n","source":"_posts/Android应用签名.md","raw":"---\ntitle: Android应用签名\ndate: 2016-12-21 10:07:40\ndescription: \"三步走：生成密钥，签名apk，优化APK\"\ntags: Android\n---\n\n### 生成密钥\n```\nkeytool -genkey -v -keystore app-release-key.keystore -alias app-release-key.keystore -keyalg RSA -keysize 2048 -validity 10000\n```\n### 签名apk\n```\njarsigner -verbose -sigalg SHA256withRSA -tsa https://timestamp.geotrust.com/tsa -digestalg SHA1 -keystore app-release-key.keystore app-release-unsigned.apk app-release-key.keystore\n```\n### 优化APK\n```\nzipalign -v 4 app-release-unsigned.apk app-1.0.0.apk\n```\n","slug":"Android应用签名","published":1,"updated":"2017-05-10T13:33:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphyw00013ghgnw74icgy","content":"<h3 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore app-release-key.keystore -alias app-release-key.keystore -keyalg RSA -keysize 2048 -validity 10000</div></pre></td></tr></table></figure>\n<h3 id=\"签名apk\"><a href=\"#签名apk\" class=\"headerlink\" title=\"签名apk\"></a>签名apk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jarsigner -verbose -sigalg SHA256withRSA -tsa https://timestamp.geotrust.com/tsa -digestalg SHA1 -keystore app-release-key.keystore app-release-unsigned.apk app-release-key.keystore</div></pre></td></tr></table></figure>\n<h3 id=\"优化APK\"><a href=\"#优化APK\" class=\"headerlink\" title=\"优化APK\"></a>优化APK</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zipalign -v 4 app-release-unsigned.apk app-1.0.0.apk</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -genkey -v -keystore app-release-key.keystore -alias app-release-key.keystore -keyalg RSA -keysize 2048 -validity 10000</div></pre></td></tr></table></figure>\n<h3 id=\"签名apk\"><a href=\"#签名apk\" class=\"headerlink\" title=\"签名apk\"></a>签名apk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jarsigner -verbose -sigalg SHA256withRSA -tsa https://timestamp.geotrust.com/tsa -digestalg SHA1 -keystore app-release-key.keystore app-release-unsigned.apk app-release-key.keystore</div></pre></td></tr></table></figure>\n<h3 id=\"优化APK\"><a href=\"#优化APK\" class=\"headerlink\" title=\"优化APK\"></a>优化APK</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zipalign -v 4 app-release-unsigned.apk app-1.0.0.apk</div></pre></td></tr></table></figure>\n"},{"title":"Finder 在当前目录打开 iTerm2","date":"2017-04-25T09:07:08.000Z","description":"使用 Automator 编写脚本即可实现使用快捷键在当前目录开启终端：","_content":"使用 Automator 编写脚本即可实现使用快捷键在当前目录开启终端：\n1. 打开Automator，选择新建，选择服务\n2. 服务接受设为没有输入，位置设为Finder\n![20170421](http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-171914.png)\n3. 从左侧的资源库中找出 运行AppleScript，拖到右侧，然后保存为Open iTerm Here\n![20170421](http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172049.png)\n4. 在刚刚创建的AppleScript的输入框中输入如下代码\n```shell\non run {input, parameters}\n\t\t\n\ttell application \"Finder\"\n\t\tset pathList to (quoted form of POSIX path of (folder of the front window as alias))\n\t\tset command to \"clear; cd \" & pathList\n\tend tell\n\t\n\ttell application \"System Events\"\n\t\t# some versions might identify as \"iTerm2\" instead of \"iTerm\"\n\t\tset isRunning to (exists (processes where name is \"iTerm\")) or (exists (processes where name is \"iTerm2\"))\n\tend tell\n\t\n\ttell application \"iTerm\"\n\t\tactivate\n\t\tset hasNoWindows to ((count of windows) is 0)\n\t\tif isRunning and hasNoWindows then\n\t\t\tcreate window with default profile\n\t\tend if\n\t\tselect first window\n    \n\t\ttell the first window\n\t\t\tif isRunning and hasNoWindows is false then\n\t\t\t\tcreate tab with default profile\n\t\t\tend if\n\t\t\ttell current session to write text command\n\t\tend tell\n\tend tell\n\t\nend run\n```\n5. 然后通知iTerm的第一个窗口新建标签并跳到这个目录去\n6. 最后再去键盘设置里改一下快捷键，然后就可以快速在Finder中通过iTerm打开当前目录了\n![0170421](http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172951.png)\n","source":"_posts/Finder-在当前目录打开-iTerm2.md","raw":"---\ntitle: Finder 在当前目录打开 iTerm2\ndate: 2017-04-25 17:07:08\ndescription: \"使用 Automator 编写脚本即可实现使用快捷键在当前目录开启终端：\"\ncategories: \n- Mac\n---\n使用 Automator 编写脚本即可实现使用快捷键在当前目录开启终端：\n1. 打开Automator，选择新建，选择服务\n2. 服务接受设为没有输入，位置设为Finder\n![20170421](http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-171914.png)\n3. 从左侧的资源库中找出 运行AppleScript，拖到右侧，然后保存为Open iTerm Here\n![20170421](http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172049.png)\n4. 在刚刚创建的AppleScript的输入框中输入如下代码\n```shell\non run {input, parameters}\n\t\t\n\ttell application \"Finder\"\n\t\tset pathList to (quoted form of POSIX path of (folder of the front window as alias))\n\t\tset command to \"clear; cd \" & pathList\n\tend tell\n\t\n\ttell application \"System Events\"\n\t\t# some versions might identify as \"iTerm2\" instead of \"iTerm\"\n\t\tset isRunning to (exists (processes where name is \"iTerm\")) or (exists (processes where name is \"iTerm2\"))\n\tend tell\n\t\n\ttell application \"iTerm\"\n\t\tactivate\n\t\tset hasNoWindows to ((count of windows) is 0)\n\t\tif isRunning and hasNoWindows then\n\t\t\tcreate window with default profile\n\t\tend if\n\t\tselect first window\n    \n\t\ttell the first window\n\t\t\tif isRunning and hasNoWindows is false then\n\t\t\t\tcreate tab with default profile\n\t\t\tend if\n\t\t\ttell current session to write text command\n\t\tend tell\n\tend tell\n\t\nend run\n```\n5. 然后通知iTerm的第一个窗口新建标签并跳到这个目录去\n6. 最后再去键盘设置里改一下快捷键，然后就可以快速在Finder中通过iTerm打开当前目录了\n![0170421](http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172951.png)\n","slug":"Finder-在当前目录打开-iTerm2","published":1,"updated":"2017-05-10T13:33:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphz300023ghgi0laqudx","content":"<p>使用 Automator 编写脚本即可实现使用快捷键在当前目录开启终端：</p>\n<ol>\n<li>打开Automator，选择新建，选择服务</li>\n<li>服务接受设为没有输入，位置设为Finder<br><img src=\"http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-171914.png\" alt=\"20170421\"></li>\n<li>从左侧的资源库中找出 运行AppleScript，拖到右侧，然后保存为Open iTerm Here<br><img src=\"http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172049.png\" alt=\"20170421\"></li>\n<li><p>在刚刚创建的AppleScript的输入框中输入如下代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">on run &#123;input, parameters&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\ttell application \"Finder\"</div><div class=\"line\">\t\tset pathList to (quoted form of POSIX path of (folder of the front window as alias))</div><div class=\"line\">\t\tset command to \"clear; cd \" &amp; pathList</div><div class=\"line\">\tend tell</div><div class=\"line\">\t</div><div class=\"line\">\ttell application \"System Events\"</div><div class=\"line\"><span class=\"meta\">\t\t#</span> some versions might identify as \"iTerm2\" instead of \"iTerm\"</div><div class=\"line\">\t\tset isRunning to (exists (processes where name is \"iTerm\")) or (exists (processes where name is \"iTerm2\"))</div><div class=\"line\">\tend tell</div><div class=\"line\">\t</div><div class=\"line\">\ttell application \"iTerm\"</div><div class=\"line\">\t\tactivate</div><div class=\"line\">\t\tset hasNoWindows to ((count of windows) is 0)</div><div class=\"line\">\t\tif isRunning and hasNoWindows then</div><div class=\"line\">\t\t\tcreate window with default profile</div><div class=\"line\">\t\tend if</div><div class=\"line\">\t\tselect first window</div><div class=\"line\">    </div><div class=\"line\">\t\ttell the first window</div><div class=\"line\">\t\t\tif isRunning and hasNoWindows is false then</div><div class=\"line\">\t\t\t\tcreate tab with default profile</div><div class=\"line\">\t\t\tend if</div><div class=\"line\">\t\t\ttell current session to write text command</div><div class=\"line\">\t\tend tell</div><div class=\"line\">\tend tell</div><div class=\"line\">\t</div><div class=\"line\">end run</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后通知iTerm的第一个窗口新建标签并跳到这个目录去</p>\n</li>\n<li>最后再去键盘设置里改一下快捷键，然后就可以快速在Finder中通过iTerm打开当前目录了<br><img src=\"http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172951.png\" alt=\"0170421\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 Automator 编写脚本即可实现使用快捷键在当前目录开启终端：</p>\n<ol>\n<li>打开Automator，选择新建，选择服务</li>\n<li>服务接受设为没有输入，位置设为Finder<br><img src=\"http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-171914.png\" alt=\"20170421\"></li>\n<li>从左侧的资源库中找出 运行AppleScript，拖到右侧，然后保存为Open iTerm Here<br><img src=\"http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172049.png\" alt=\"20170421\"></li>\n<li><p>在刚刚创建的AppleScript的输入框中输入如下代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">on run &#123;input, parameters&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\ttell application \"Finder\"</div><div class=\"line\">\t\tset pathList to (quoted form of POSIX path of (folder of the front window as alias))</div><div class=\"line\">\t\tset command to \"clear; cd \" &amp; pathList</div><div class=\"line\">\tend tell</div><div class=\"line\">\t</div><div class=\"line\">\ttell application \"System Events\"</div><div class=\"line\"><span class=\"meta\">\t\t#</span> some versions might identify as \"iTerm2\" instead of \"iTerm\"</div><div class=\"line\">\t\tset isRunning to (exists (processes where name is \"iTerm\")) or (exists (processes where name is \"iTerm2\"))</div><div class=\"line\">\tend tell</div><div class=\"line\">\t</div><div class=\"line\">\ttell application \"iTerm\"</div><div class=\"line\">\t\tactivate</div><div class=\"line\">\t\tset hasNoWindows to ((count of windows) is 0)</div><div class=\"line\">\t\tif isRunning and hasNoWindows then</div><div class=\"line\">\t\t\tcreate window with default profile</div><div class=\"line\">\t\tend if</div><div class=\"line\">\t\tselect first window</div><div class=\"line\">    </div><div class=\"line\">\t\ttell the first window</div><div class=\"line\">\t\t\tif isRunning and hasNoWindows is false then</div><div class=\"line\">\t\t\t\tcreate tab with default profile</div><div class=\"line\">\t\t\tend if</div><div class=\"line\">\t\t\ttell current session to write text command</div><div class=\"line\">\t\tend tell</div><div class=\"line\">\tend tell</div><div class=\"line\">\t</div><div class=\"line\">end run</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后通知iTerm的第一个窗口新建标签并跳到这个目录去</p>\n</li>\n<li>最后再去键盘设置里改一下快捷键，然后就可以快速在Finder中通过iTerm打开当前目录了<br><img src=\"http://7xoor3.com1.z0.glb.clouddn.com/blog/QQ20170421-172951.png\" alt=\"0170421\"></li>\n</ol>\n"},{"title":"MySQL触发器","date":"2016-04-24T14:26:09.000Z","description":"触发器:能监视: 增,删,改；触发操作: 增,删,改。四要素:监视地点，监视事件，触发时间，触发事件。创建触发器的语法：删除触发器的语法：","_content":"触发器:\n1. 能监视: 增,删,改\n2. 触发操作: 增,删,改\n\n四要素:\n- 监视地点\n- 监视事件\n- 触发时间\n- 触发事件\n\n创建触发器的语法\n```sql\ncreate trigger triggerName\n  after/before insert/update/delete on <表名>\n  for each row #这句话是固定的\nbegin\n  <sql语句>;  #一句或多句,insert/update/delete范围内\nend;\n```\n删除触发器的语法:\n```sql\nDrop trigger <触发器名>\n```\n查看触发器:\n```sql\nShow triggers\n```\n如何在触发器引用行的值:\n- 对于insert而言, 新增的行 用new来表示\n- 行中的每一列的值 ,用new.列名来表示\n- 对于 delete来说, 原本有一行,后来被删除\n- 想引用被删除的这一行,用old来表示,  old.列名,就可以引用被删行中的值\n- 对于update来说,被修改的行\n- 修改前的数据 ,用old来表示, old.列名引用被修改之前行中的值\n- 修改后的数据,用new 来表示, new.列名引用被修改之后行中的值\n\n触发器里after 和before的区别:\n- After 是先完成数据的增,删,改再触发,\n触发的语句晚于监视的增,删,改,无法影响前面的增删改动作.\n- Before是先完成触发,再增删改,\n触发的语句先于监视的增,删,改发生,我们有机会判断,修改即将发生的操作\n\n典型案例:\n- 对于所下订单,进行判断,如果订单的数量 > 5，就认为是恶意订单，\n强制把所订的商品数量改成5。\n","source":"_posts/MySQL触发器.md","raw":"---\ntitle: MySQL触发器\ndate: 2016-04-24 22:26:09\ndescription: \"触发器:能监视: 增,删,改；触发操作: 增,删,改。四要素:监视地点，监视事件，触发时间，触发事件。创建触发器的语法：删除触发器的语法：\"\ntags:\n- mysql\ncategories:\n- Database\n---\n触发器:\n1. 能监视: 增,删,改\n2. 触发操作: 增,删,改\n\n四要素:\n- 监视地点\n- 监视事件\n- 触发时间\n- 触发事件\n\n创建触发器的语法\n```sql\ncreate trigger triggerName\n  after/before insert/update/delete on <表名>\n  for each row #这句话是固定的\nbegin\n  <sql语句>;  #一句或多句,insert/update/delete范围内\nend;\n```\n删除触发器的语法:\n```sql\nDrop trigger <触发器名>\n```\n查看触发器:\n```sql\nShow triggers\n```\n如何在触发器引用行的值:\n- 对于insert而言, 新增的行 用new来表示\n- 行中的每一列的值 ,用new.列名来表示\n- 对于 delete来说, 原本有一行,后来被删除\n- 想引用被删除的这一行,用old来表示,  old.列名,就可以引用被删行中的值\n- 对于update来说,被修改的行\n- 修改前的数据 ,用old来表示, old.列名引用被修改之前行中的值\n- 修改后的数据,用new 来表示, new.列名引用被修改之后行中的值\n\n触发器里after 和before的区别:\n- After 是先完成数据的增,删,改再触发,\n触发的语句晚于监视的增,删,改,无法影响前面的增删改动作.\n- Before是先完成触发,再增删改,\n触发的语句先于监视的增,删,改发生,我们有机会判断,修改即将发生的操作\n\n典型案例:\n- 对于所下订单,进行判断,如果订单的数量 > 5，就认为是恶意订单，\n强制把所订的商品数量改成5。\n","slug":"MySQL触发器","published":1,"updated":"2017-05-10T13:33:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphz900043ghgbfwk2zew","content":"<p>触发器:</p>\n<ol>\n<li>能监视: 增,删,改</li>\n<li>触发操作: 增,删,改</li>\n</ol>\n<p>四要素:</p>\n<ul>\n<li>监视地点</li>\n<li>监视事件</li>\n<li>触发时间</li>\n<li>触发事件</li>\n</ul>\n<p>创建触发器的语法<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">create trigger triggerName</div><div class=\"line\">  after/before insert/update/delete on &lt;表名&gt;</div><div class=\"line\">  for each row #这句话是固定的</div><div class=\"line\">begin</div><div class=\"line\">  &lt;sql语句&gt;;  #一句或多句,insert/update/delete范围内</div><div class=\"line\">end;</div></pre></td></tr></table></figure></p>\n<p>删除触发器的语法:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">trigger</span> &lt;触发器名&gt;</div></pre></td></tr></table></figure></p>\n<p>查看触发器:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Show</span> <span class=\"keyword\">triggers</span></div></pre></td></tr></table></figure></p>\n<p>如何在触发器引用行的值:</p>\n<ul>\n<li>对于insert而言, 新增的行 用new来表示</li>\n<li>行中的每一列的值 ,用new.列名来表示</li>\n<li>对于 delete来说, 原本有一行,后来被删除</li>\n<li>想引用被删除的这一行,用old来表示,  old.列名,就可以引用被删行中的值</li>\n<li>对于update来说,被修改的行</li>\n<li>修改前的数据 ,用old来表示, old.列名引用被修改之前行中的值</li>\n<li>修改后的数据,用new 来表示, new.列名引用被修改之后行中的值</li>\n</ul>\n<p>触发器里after 和before的区别:</p>\n<ul>\n<li>After 是先完成数据的增,删,改再触发,<br>触发的语句晚于监视的增,删,改,无法影响前面的增删改动作.</li>\n<li>Before是先完成触发,再增删改,<br>触发的语句先于监视的增,删,改发生,我们有机会判断,修改即将发生的操作</li>\n</ul>\n<p>典型案例:</p>\n<ul>\n<li>对于所下订单,进行判断,如果订单的数量 &gt; 5，就认为是恶意订单，<br>强制把所订的商品数量改成5。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>触发器:</p>\n<ol>\n<li>能监视: 增,删,改</li>\n<li>触发操作: 增,删,改</li>\n</ol>\n<p>四要素:</p>\n<ul>\n<li>监视地点</li>\n<li>监视事件</li>\n<li>触发时间</li>\n<li>触发事件</li>\n</ul>\n<p>创建触发器的语法<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">create trigger triggerName</div><div class=\"line\">  after/before insert/update/delete on &lt;表名&gt;</div><div class=\"line\">  for each row #这句话是固定的</div><div class=\"line\">begin</div><div class=\"line\">  &lt;sql语句&gt;;  #一句或多句,insert/update/delete范围内</div><div class=\"line\">end;</div></pre></td></tr></table></figure></p>\n<p>删除触发器的语法:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">trigger</span> &lt;触发器名&gt;</div></pre></td></tr></table></figure></p>\n<p>查看触发器:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Show</span> <span class=\"keyword\">triggers</span></div></pre></td></tr></table></figure></p>\n<p>如何在触发器引用行的值:</p>\n<ul>\n<li>对于insert而言, 新增的行 用new来表示</li>\n<li>行中的每一列的值 ,用new.列名来表示</li>\n<li>对于 delete来说, 原本有一行,后来被删除</li>\n<li>想引用被删除的这一行,用old来表示,  old.列名,就可以引用被删行中的值</li>\n<li>对于update来说,被修改的行</li>\n<li>修改前的数据 ,用old来表示, old.列名引用被修改之前行中的值</li>\n<li>修改后的数据,用new 来表示, new.列名引用被修改之后行中的值</li>\n</ul>\n<p>触发器里after 和before的区别:</p>\n<ul>\n<li>After 是先完成数据的增,删,改再触发,<br>触发的语句晚于监视的增,删,改,无法影响前面的增删改动作.</li>\n<li>Before是先完成触发,再增删改,<br>触发的语句先于监视的增,删,改发生,我们有机会判断,修改即将发生的操作</li>\n</ul>\n<p>典型案例:</p>\n<ul>\n<li>对于所下订单,进行判断,如果订单的数量 &gt; 5，就认为是恶意订单，<br>强制把所订的商品数量改成5。</li>\n</ul>\n"},{"title":"PHP header()函数","date":"2016-04-24T15:43:27.000Z","description":"在php程序代码中，我们可以使用header()函数向http协议头写入头信息：","_content":"在php程序代码中，我们可以使用header()函数向http协议头写入头信息：\n```php\n//控制跳转到新的页面 header(\"Location: 新的页面\");\n//控制浏览器间隔一定的时间去跳转，例子为3秒\nheader(\"Refresh: 3;url=http://localhost.com\");\n//通过header来禁用缓存（ajax），一共需要写入三个头消息\nheader(\"Rxpires: -1\"); header(\"Cache-Control: no_cache\"); header(\"Pragma: no_cache\");\n```\n","source":"_posts/PHP-header-函数.md","raw":"---\ntitle: PHP header()函数\ndate: 2016-04-24 23:43:27\ndescription: \"在php程序代码中，我们可以使用header()函数向http协议头写入头信息：\"\ntags:\n- php\n---\n在php程序代码中，我们可以使用header()函数向http协议头写入头信息：\n```php\n//控制跳转到新的页面 header(\"Location: 新的页面\");\n//控制浏览器间隔一定的时间去跳转，例子为3秒\nheader(\"Refresh: 3;url=http://localhost.com\");\n//通过header来禁用缓存（ajax），一共需要写入三个头消息\nheader(\"Rxpires: -1\"); header(\"Cache-Control: no_cache\"); header(\"Pragma: no_cache\");\n```\n","slug":"PHP-header-函数","published":1,"updated":"2017-05-10T13:33:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzf00063ghg2jy71r4e","content":"<p>在php程序代码中，我们可以使用header()函数向http协议头写入头信息：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//控制跳转到新的页面 header(\"Location: 新的页面\");</span></div><div class=\"line\"><span class=\"comment\">//控制浏览器间隔一定的时间去跳转，例子为3秒</span></div><div class=\"line\">header(<span class=\"string\">\"Refresh: 3;url=http://localhost.com\"</span>);</div><div class=\"line\"><span class=\"comment\">//通过header来禁用缓存（ajax），一共需要写入三个头消息</span></div><div class=\"line\">header(<span class=\"string\">\"Rxpires: -1\"</span>); header(<span class=\"string\">\"Cache-Control: no_cache\"</span>); header(<span class=\"string\">\"Pragma: no_cache\"</span>);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在php程序代码中，我们可以使用header()函数向http协议头写入头信息：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//控制跳转到新的页面 header(\"Location: 新的页面\");</span></div><div class=\"line\"><span class=\"comment\">//控制浏览器间隔一定的时间去跳转，例子为3秒</span></div><div class=\"line\">header(<span class=\"string\">\"Refresh: 3;url=http://localhost.com\"</span>);</div><div class=\"line\"><span class=\"comment\">//通过header来禁用缓存（ajax），一共需要写入三个头消息</span></div><div class=\"line\">header(<span class=\"string\">\"Rxpires: -1\"</span>); header(<span class=\"string\">\"Cache-Control: no_cache\"</span>); header(<span class=\"string\">\"Pragma: no_cache\"</span>);</div></pre></td></tr></table></figure></p>\n"},{"title":"MySQL用户授权","date":"2016-04-24T13:59:53.000Z","description":"用户管理:use mysql;查看:select host,user,password from user;创建:create user zx_root IDENTIFIED by 'xxxxx';修改:rename user feng to newuser;","_content":"用户管理\n```sql\nuse mysql;\n```\n查看\n```sql\nselect host,user,password from user ;\n```\n创建\n```sql\ncreate user zx_root IDENTIFIED by 'xxxxx';\n--identified by 会将纯文本密码加密作为散列值存储\n```\n修改\n```sql\nrename user feng to newuser;\n--mysql 5之后可以使用，之前需要使用update 更新user表\n```\n删除\n```sql\ndrop user newuser;\n--mysql5之前删除用户时必须先使用revoke 删除用户权限，然后删除用户，mysql5之后drop 命令可以删除用户的同时删除用户的相关权限\n```\n更改密码\n```sql\nset password for zx_root =password('xxxxxx');\nupdate  mysql.user  set  password=password('xxxx')  where user='otheruser'\n```\n查看用户权限\n```sql\nshow grants for zx_root;\n```\n赋予权限\n```sql\ngrant select on dmc_db.*  to zx_root;\n```\n回收权限\n```sql\nrevoke  select on dmc_db.*  from  zx_root;\n--如果权限不存在会报错\n```\n上面的命令也可使用多个权限同时赋予和回收，权限之间使用逗号分隔\n```sql\ngrant select，update，delete  ，insert  on dmc_db.*  to  zx_root;\n```\n如果想立即看到结果使用\n```sql\nflush privileges;\n```\n命令更新\n设置权限时必须给出一下信息\n1. 要授予的权限\n2. 被授予访问权限的数据库或表\n3. 用户名\n\ngrant和revoke可以在几个层次上控制访问权限\n- 整个服务器，使用 grant ALL  和revoke  ALL\n- 整个数据库，使用on  database.*\n- 特点表，使用on  database.table\n- 特定的列\n- 特定的存储过程\n\nuser表中host列的值的意义\n- %              匹配所有主机\n- localhost    localhost不会被解析成IP地址，直接通过UNIXsocket连接\n- 127.0.0.1      会通过TCP/IP协议连接，并且只能在本机访问；\n- ::1                 ::1就是兼容支持ipv6的，表示同ipv4的127.0.0.1\n\n\ngrant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。\n\n```sql\ngrant select on testdb.* to common_user@'%'\ngrant insert on testdb.* to common_user@'%'\ngrant update on testdb.* to common_user@'%'\ngrant delete on testdb.* to common_user@'%'\n```\n\n或者，用一条 MySQL 命令来替代：\n```sql\ngrant select, insert, update, delete on testdb.* to common_user@'%'\n```\ngrant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。\ngrant 创建、修改、删除 MySQL 数据表结构权限。\n```sql\ngrant create on testdb.* to developer@'192.168.0.%';\ngrant alter on testdb.* to developer@'192.168.0.%';\ngrant drop on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 外键权限。\n```sql\ngrant references on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 临时表权限。\n```sql\ngrant create temporary tables on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 索引权限。\n```sql\ngrant index on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 视图、查看视图源代码 权限。\n```sql\ngrant create view on testdb.* to developer@'192.168.0.%';\ngrant show view on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 存储过程、函数 权限。\n```sql\ngrant create routine on testdb.* to developer@'192.168.0.%'; -- now, can show procedure status\ngrant alter routine on testdb.* to developer@'192.168.0.%'; -- now, you can drop a procedure\ngrant execute on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 普通 DBA 管理某个 MySQL 数据库的权限。\n```sql\ngrant all privileges on testdb to dba@'localhost'\n--其中，关键字 \"privileges\" 可以省略。\n```\n\ngrant 高级 DBA 管理 MySQL 中所有数据库的权限。\n```sql\ngrant all on *.* to dba@'localhost'\n```\n\nMySQL grant 权限，分别可以作用在多个层次上。\n\n1. grant 作用在整个 MySQL 服务器上：\n```sql\ngrant select on *.* to dba@localhost; -- dba 可以查询 MySQL 中所有数据库中的表。\ngrant all on *.* to dba@localhost; -- dba 可以管理 MySQL 中的所有数据库\n```\n\n2. grant 作用在单个数据库上：\n```sql\ngrant select on testdb.* to dba@localhost; -- dba 可以查询 testdb 中的表。\n```\n\n3. grant 作用在单个数据表上：\n```sql\ngrant select, insert, update, delete on testdb.orders to dba@localhost;\n```\n\n4. grant 作用在表中的列上：\n```sql\ngrant select(id, se, rank) on testdb.apache_log to dba@localhost;\n```\n\n5. grant 作用在存储过程、函数上：\n```sql\ngrant execute on procedure testdb.pr_add to 'dba'@'localhost'\ngrant execute on function testdb.fn_add to 'dba'@'localhost'\n```\n\n6. 注意：修改完权限以后 一定要刷新服务，或者重启服务，刷新服务用：\n```sql\nFLUSH PRIVILEGES;\n```\n","source":"_posts/MySQL用户授权.md","raw":"---\ntitle: MySQL用户授权\ndate: 2016-04-24 21:59:53\ndescription: \"用户管理:use mysql;查看:select host,user,password from user;创建:create user zx_root IDENTIFIED by 'xxxxx';修改:rename user feng to newuser;\"\ntags:\n- mysql\ncategories:\n- Database\n---\n用户管理\n```sql\nuse mysql;\n```\n查看\n```sql\nselect host,user,password from user ;\n```\n创建\n```sql\ncreate user zx_root IDENTIFIED by 'xxxxx';\n--identified by 会将纯文本密码加密作为散列值存储\n```\n修改\n```sql\nrename user feng to newuser;\n--mysql 5之后可以使用，之前需要使用update 更新user表\n```\n删除\n```sql\ndrop user newuser;\n--mysql5之前删除用户时必须先使用revoke 删除用户权限，然后删除用户，mysql5之后drop 命令可以删除用户的同时删除用户的相关权限\n```\n更改密码\n```sql\nset password for zx_root =password('xxxxxx');\nupdate  mysql.user  set  password=password('xxxx')  where user='otheruser'\n```\n查看用户权限\n```sql\nshow grants for zx_root;\n```\n赋予权限\n```sql\ngrant select on dmc_db.*  to zx_root;\n```\n回收权限\n```sql\nrevoke  select on dmc_db.*  from  zx_root;\n--如果权限不存在会报错\n```\n上面的命令也可使用多个权限同时赋予和回收，权限之间使用逗号分隔\n```sql\ngrant select，update，delete  ，insert  on dmc_db.*  to  zx_root;\n```\n如果想立即看到结果使用\n```sql\nflush privileges;\n```\n命令更新\n设置权限时必须给出一下信息\n1. 要授予的权限\n2. 被授予访问权限的数据库或表\n3. 用户名\n\ngrant和revoke可以在几个层次上控制访问权限\n- 整个服务器，使用 grant ALL  和revoke  ALL\n- 整个数据库，使用on  database.*\n- 特点表，使用on  database.table\n- 特定的列\n- 特定的存储过程\n\nuser表中host列的值的意义\n- %              匹配所有主机\n- localhost    localhost不会被解析成IP地址，直接通过UNIXsocket连接\n- 127.0.0.1      会通过TCP/IP协议连接，并且只能在本机访问；\n- ::1                 ::1就是兼容支持ipv6的，表示同ipv4的127.0.0.1\n\n\ngrant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。\n\n```sql\ngrant select on testdb.* to common_user@'%'\ngrant insert on testdb.* to common_user@'%'\ngrant update on testdb.* to common_user@'%'\ngrant delete on testdb.* to common_user@'%'\n```\n\n或者，用一条 MySQL 命令来替代：\n```sql\ngrant select, insert, update, delete on testdb.* to common_user@'%'\n```\ngrant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。\ngrant 创建、修改、删除 MySQL 数据表结构权限。\n```sql\ngrant create on testdb.* to developer@'192.168.0.%';\ngrant alter on testdb.* to developer@'192.168.0.%';\ngrant drop on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 外键权限。\n```sql\ngrant references on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 临时表权限。\n```sql\ngrant create temporary tables on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 索引权限。\n```sql\ngrant index on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 视图、查看视图源代码 权限。\n```sql\ngrant create view on testdb.* to developer@'192.168.0.%';\ngrant show view on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 操作 MySQL 存储过程、函数 权限。\n```sql\ngrant create routine on testdb.* to developer@'192.168.0.%'; -- now, can show procedure status\ngrant alter routine on testdb.* to developer@'192.168.0.%'; -- now, you can drop a procedure\ngrant execute on testdb.* to developer@'192.168.0.%';\n```\n\ngrant 普通 DBA 管理某个 MySQL 数据库的权限。\n```sql\ngrant all privileges on testdb to dba@'localhost'\n--其中，关键字 \"privileges\" 可以省略。\n```\n\ngrant 高级 DBA 管理 MySQL 中所有数据库的权限。\n```sql\ngrant all on *.* to dba@'localhost'\n```\n\nMySQL grant 权限，分别可以作用在多个层次上。\n\n1. grant 作用在整个 MySQL 服务器上：\n```sql\ngrant select on *.* to dba@localhost; -- dba 可以查询 MySQL 中所有数据库中的表。\ngrant all on *.* to dba@localhost; -- dba 可以管理 MySQL 中的所有数据库\n```\n\n2. grant 作用在单个数据库上：\n```sql\ngrant select on testdb.* to dba@localhost; -- dba 可以查询 testdb 中的表。\n```\n\n3. grant 作用在单个数据表上：\n```sql\ngrant select, insert, update, delete on testdb.orders to dba@localhost;\n```\n\n4. grant 作用在表中的列上：\n```sql\ngrant select(id, se, rank) on testdb.apache_log to dba@localhost;\n```\n\n5. grant 作用在存储过程、函数上：\n```sql\ngrant execute on procedure testdb.pr_add to 'dba'@'localhost'\ngrant execute on function testdb.fn_add to 'dba'@'localhost'\n```\n\n6. 注意：修改完权限以后 一定要刷新服务，或者重启服务，刷新服务用：\n```sql\nFLUSH PRIVILEGES;\n```\n","slug":"MySQL用户授权","published":1,"updated":"2017-05-10T13:33:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzh00073ghg9xmljyt8","content":"<p>用户管理<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> mysql;</div></pre></td></tr></table></figure></p>\n<p>查看<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> host,<span class=\"keyword\">user</span>,<span class=\"keyword\">password</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> ;</div></pre></td></tr></table></figure></p>\n<p>创建<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> zx_root <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">by</span> <span class=\"string\">'xxxxx'</span>;</div><div class=\"line\"><span class=\"comment\">--identified by 会将纯文本密码加密作为散列值存储</span></div></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">rename</span> <span class=\"keyword\">user</span> feng <span class=\"keyword\">to</span> newuser;</div><div class=\"line\"><span class=\"comment\">--mysql 5之后可以使用，之前需要使用update 更新user表</span></div></pre></td></tr></table></figure></p>\n<p>删除<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> newuser;</div><div class=\"line\"><span class=\"comment\">--mysql5之前删除用户时必须先使用revoke 删除用户权限，然后删除用户，mysql5之后drop 命令可以删除用户的同时删除用户的相关权限</span></div></pre></td></tr></table></figure></p>\n<p>更改密码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> <span class=\"keyword\">for</span> zx_root =<span class=\"keyword\">password</span>(<span class=\"string\">'xxxxxx'</span>);</div><div class=\"line\"><span class=\"keyword\">update</span>  mysql.user  <span class=\"keyword\">set</span>  <span class=\"keyword\">password</span>=<span class=\"keyword\">password</span>(<span class=\"string\">'xxxx'</span>)  <span class=\"keyword\">where</span> <span class=\"keyword\">user</span>=<span class=\"string\">'otheruser'</span></div></pre></td></tr></table></figure></p>\n<p>查看用户权限<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> zx_root;</div></pre></td></tr></table></figure></p>\n<p>赋予权限<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> dmc_db.*  <span class=\"keyword\">to</span> zx_root;</div></pre></td></tr></table></figure></p>\n<p>回收权限<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">revoke</span>  <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> dmc_db.*  <span class=\"keyword\">from</span>  zx_root;</div><div class=\"line\"><span class=\"comment\">--如果权限不存在会报错</span></div></pre></td></tr></table></figure></p>\n<p>上面的命令也可使用多个权限同时赋予和回收，权限之间使用逗号分隔<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>，<span class=\"keyword\">update</span>，<span class=\"keyword\">delete</span>  ，<span class=\"keyword\">insert</span>  <span class=\"keyword\">on</span> dmc_db.*  <span class=\"keyword\">to</span>  zx_root;</div></pre></td></tr></table></figure></p>\n<p>如果想立即看到结果使用<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</div></pre></td></tr></table></figure></p>\n<p>命令更新<br>设置权限时必须给出一下信息</p>\n<ol>\n<li>要授予的权限</li>\n<li>被授予访问权限的数据库或表</li>\n<li>用户名</li>\n</ol>\n<p>grant和revoke可以在几个层次上控制访问权限</p>\n<ul>\n<li>整个服务器，使用 grant ALL  和revoke  ALL</li>\n<li>整个数据库，使用on  database.*</li>\n<li>特点表，使用on  database.table</li>\n<li>特定的列</li>\n<li>特定的存储过程</li>\n</ul>\n<p>user表中host列的值的意义</p>\n<ul>\n<li>%              匹配所有主机</li>\n<li>localhost    localhost不会被解析成IP地址，直接通过UNIXsocket连接</li>\n<li>127.0.0.1      会通过TCP/IP协议连接，并且只能在本机访问；</li>\n<li>::1                 ::1就是兼容支持ipv6的，表示同ipv4的127.0.0.1</li>\n</ul>\n<p>grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">update</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div></pre></td></tr></table></figure>\n<p>或者，用一条 MySQL 命令来替代：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div></pre></td></tr></table></figure></p>\n<p>grant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。<br>grant 创建、修改、删除 MySQL 数据表结构权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 外键权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">references</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 临时表权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tables</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 索引权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">index</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 视图、查看视图源代码 权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">show</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 存储过程、函数 权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, can show procedure status</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, you can drop a procedure</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 普通 DBA 管理某个 MySQL 数据库的权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> testdb <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></div><div class=\"line\"><span class=\"comment\">--其中，关键字 \"privileges\" 可以省略。</span></div></pre></td></tr></table></figure></p>\n<p>grant 高级 DBA 管理 MySQL 中所有数据库的权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></div></pre></td></tr></table></figure></p>\n<p>MySQL grant 权限，分别可以作用在多个层次上。</p>\n<ol>\n<li><p>grant 作用在整个 MySQL 服务器上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 MySQL 中所有数据库中的表。</span></div><div class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以管理 MySQL 中的所有数据库</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在单个数据库上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 testdb 中的表。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在单个数据表上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.orders <span class=\"keyword\">to</span> dba@localhost;</div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在表中的列上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>(<span class=\"keyword\">id</span>, se, <span class=\"keyword\">rank</span>) <span class=\"keyword\">on</span> testdb.apache_log <span class=\"keyword\">to</span> dba@localhost;</div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在存储过程、函数上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">procedure</span> testdb.pr_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">function</span> testdb.fn_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>注意：修改完权限以后 一定要刷新服务，或者重启服务，刷新服务用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>用户管理<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> mysql;</div></pre></td></tr></table></figure></p>\n<p>查看<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> host,<span class=\"keyword\">user</span>,<span class=\"keyword\">password</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> ;</div></pre></td></tr></table></figure></p>\n<p>创建<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> zx_root <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">by</span> <span class=\"string\">'xxxxx'</span>;</div><div class=\"line\"><span class=\"comment\">--identified by 会将纯文本密码加密作为散列值存储</span></div></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">rename</span> <span class=\"keyword\">user</span> feng <span class=\"keyword\">to</span> newuser;</div><div class=\"line\"><span class=\"comment\">--mysql 5之后可以使用，之前需要使用update 更新user表</span></div></pre></td></tr></table></figure></p>\n<p>删除<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> newuser;</div><div class=\"line\"><span class=\"comment\">--mysql5之前删除用户时必须先使用revoke 删除用户权限，然后删除用户，mysql5之后drop 命令可以删除用户的同时删除用户的相关权限</span></div></pre></td></tr></table></figure></p>\n<p>更改密码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> <span class=\"keyword\">for</span> zx_root =<span class=\"keyword\">password</span>(<span class=\"string\">'xxxxxx'</span>);</div><div class=\"line\"><span class=\"keyword\">update</span>  mysql.user  <span class=\"keyword\">set</span>  <span class=\"keyword\">password</span>=<span class=\"keyword\">password</span>(<span class=\"string\">'xxxx'</span>)  <span class=\"keyword\">where</span> <span class=\"keyword\">user</span>=<span class=\"string\">'otheruser'</span></div></pre></td></tr></table></figure></p>\n<p>查看用户权限<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> zx_root;</div></pre></td></tr></table></figure></p>\n<p>赋予权限<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> dmc_db.*  <span class=\"keyword\">to</span> zx_root;</div></pre></td></tr></table></figure></p>\n<p>回收权限<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">revoke</span>  <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> dmc_db.*  <span class=\"keyword\">from</span>  zx_root;</div><div class=\"line\"><span class=\"comment\">--如果权限不存在会报错</span></div></pre></td></tr></table></figure></p>\n<p>上面的命令也可使用多个权限同时赋予和回收，权限之间使用逗号分隔<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>，<span class=\"keyword\">update</span>，<span class=\"keyword\">delete</span>  ，<span class=\"keyword\">insert</span>  <span class=\"keyword\">on</span> dmc_db.*  <span class=\"keyword\">to</span>  zx_root;</div></pre></td></tr></table></figure></p>\n<p>如果想立即看到结果使用<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</div></pre></td></tr></table></figure></p>\n<p>命令更新<br>设置权限时必须给出一下信息</p>\n<ol>\n<li>要授予的权限</li>\n<li>被授予访问权限的数据库或表</li>\n<li>用户名</li>\n</ol>\n<p>grant和revoke可以在几个层次上控制访问权限</p>\n<ul>\n<li>整个服务器，使用 grant ALL  和revoke  ALL</li>\n<li>整个数据库，使用on  database.*</li>\n<li>特点表，使用on  database.table</li>\n<li>特定的列</li>\n<li>特定的存储过程</li>\n</ul>\n<p>user表中host列的值的意义</p>\n<ul>\n<li>%              匹配所有主机</li>\n<li>localhost    localhost不会被解析成IP地址，直接通过UNIXsocket连接</li>\n<li>127.0.0.1      会通过TCP/IP协议连接，并且只能在本机访问；</li>\n<li>::1                 ::1就是兼容支持ipv6的，表示同ipv4的127.0.0.1</li>\n</ul>\n<p>grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">insert</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">update</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div></pre></td></tr></table></figure>\n<p>或者，用一条 MySQL 命令来替代：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> common_user@<span class=\"string\">'%'</span></div></pre></td></tr></table></figure></p>\n<p>grant 数据库开发人员，创建表、索引、视图、存储过程、函数。。。等权限。<br>grant 创建、修改、删除 MySQL 数据表结构权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">drop</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 外键权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">references</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 临时表权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tables</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 索引权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">index</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 视图、查看视图源代码 权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">show</span> <span class=\"keyword\">view</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 操作 MySQL 存储过程、函数 权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">create</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, can show procedure status</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">alter</span> routine <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>; <span class=\"comment\">-- now, you can drop a procedure</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> developer@<span class=\"string\">'192.168.0.%'</span>;</div></pre></td></tr></table></figure></p>\n<p>grant 普通 DBA 管理某个 MySQL 数据库的权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> testdb <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></div><div class=\"line\"><span class=\"comment\">--其中，关键字 \"privileges\" 可以省略。</span></div></pre></td></tr></table></figure></p>\n<p>grant 高级 DBA 管理 MySQL 中所有数据库的权限。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@<span class=\"string\">'localhost'</span></div></pre></td></tr></table></figure></p>\n<p>MySQL grant 权限，分别可以作用在多个层次上。</p>\n<ol>\n<li><p>grant 作用在整个 MySQL 服务器上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 MySQL 中所有数据库中的表。</span></div><div class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以管理 MySQL 中的所有数据库</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在单个数据库上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> testdb.* <span class=\"keyword\">to</span> dba@localhost; <span class=\"comment\">-- dba 可以查询 testdb 中的表。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在单个数据表上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>, <span class=\"keyword\">insert</span>, <span class=\"keyword\">update</span>, <span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> testdb.orders <span class=\"keyword\">to</span> dba@localhost;</div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在表中的列上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>(<span class=\"keyword\">id</span>, se, <span class=\"keyword\">rank</span>) <span class=\"keyword\">on</span> testdb.apache_log <span class=\"keyword\">to</span> dba@localhost;</div></pre></td></tr></table></figure>\n</li>\n<li><p>grant 作用在存储过程、函数上：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">procedure</span> testdb.pr_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></div><div class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">execute</span> <span class=\"keyword\">on</span> <span class=\"keyword\">function</span> testdb.fn_add <span class=\"keyword\">to</span> <span class=\"string\">'dba'</span>@<span class=\"string\">'localhost'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>注意：修改完权限以后 一定要刷新服务，或者重启服务，刷新服务用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"ReactNative从设备上访问开发服务器","date":"2016-06-22T15:55:50.000Z","description":"使用adb reverse命令,首先把你的设备通过USB数据线连接到电脑上，并开启USB调试，运行adb reverse tcp:8081 tcp:8081。不需要更多配置，你就可以使用Reload JS和其它的开发选项了。","_content":"### Android 5.0及以上\n\n使用adb reverse命令\n\n1. 首先把你的设备通过USB数据线连接到电脑上，并开启USB调试。\n2. 运行adb reverse tcp:8081 tcp:8081\n\n不需要更多配置，你就可以使用Reload JS和其它的开发选项了。\n\n### Android 5.0以下\n\n通过Wi-Fi连接你的本地开发服务器\n1. 首先确保你的电脑和手机设备在同一个Wi-Fi环境下。\n2. 在设备上运行你的React Native应用。和打开其它App一样操作。\n3. 你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。\n4. 摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。\n5. 点击进入Dev Settings。\n6. 点击Debug server host for device。\n7. 输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。\n  - 在Mac上，你可以在系统设置/网络里找查询你的IP地址。\n  - 在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。\n  - 在Linux上你可以在终端中输入ifconfig来查询你的IP地址。\n8. 回到开发者菜单然后选择Reload JS。\n","source":"_posts/ReactNative从设备上访问开发服务器.md","raw":"---\ntitle: ReactNative从设备上访问开发服务器\ndate: 2016-06-22 23:55:50\ndescription: 使用adb reverse命令,首先把你的设备通过USB数据线连接到电脑上，并开启USB调试，运行adb reverse tcp:8081 tcp:8081。不需要更多配置，你就可以使用Reload JS和其它的开发选项了。\ntags:\n  - React\n  - ReactNative\ncategories:\n  - Front\n---\n### Android 5.0及以上\n\n使用adb reverse命令\n\n1. 首先把你的设备通过USB数据线连接到电脑上，并开启USB调试。\n2. 运行adb reverse tcp:8081 tcp:8081\n\n不需要更多配置，你就可以使用Reload JS和其它的开发选项了。\n\n### Android 5.0以下\n\n通过Wi-Fi连接你的本地开发服务器\n1. 首先确保你的电脑和手机设备在同一个Wi-Fi环境下。\n2. 在设备上运行你的React Native应用。和打开其它App一样操作。\n3. 你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。\n4. 摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。\n5. 点击进入Dev Settings。\n6. 点击Debug server host for device。\n7. 输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。\n  - 在Mac上，你可以在系统设置/网络里找查询你的IP地址。\n  - 在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。\n  - 在Linux上你可以在终端中输入ifconfig来查询你的IP地址。\n8. 回到开发者菜单然后选择Reload JS。\n","slug":"ReactNative从设备上访问开发服务器","published":1,"updated":"2017-05-10T13:33:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzj000a3ghgux1renr6","content":"<h3 id=\"Android-5-0及以上\"><a href=\"#Android-5-0及以上\" class=\"headerlink\" title=\"Android 5.0及以上\"></a>Android 5.0及以上</h3><p>使用adb reverse命令</p>\n<ol>\n<li>首先把你的设备通过USB数据线连接到电脑上，并开启USB调试。</li>\n<li>运行adb reverse tcp:8081 tcp:8081</li>\n</ol>\n<p>不需要更多配置，你就可以使用Reload JS和其它的开发选项了。</p>\n<h3 id=\"Android-5-0以下\"><a href=\"#Android-5-0以下\" class=\"headerlink\" title=\"Android 5.0以下\"></a>Android 5.0以下</h3><p>通过Wi-Fi连接你的本地开发服务器</p>\n<ol>\n<li>首先确保你的电脑和手机设备在同一个Wi-Fi环境下。</li>\n<li>在设备上运行你的React Native应用。和打开其它App一样操作。</li>\n<li>你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。</li>\n<li>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。</li>\n<li>点击进入Dev Settings。</li>\n<li>点击Debug server host for device。</li>\n<li>输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。<ul>\n<li>在Mac上，你可以在系统设置/网络里找查询你的IP地址。</li>\n<li>在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。</li>\n<li>在Linux上你可以在终端中输入ifconfig来查询你的IP地址。</li>\n</ul>\n</li>\n<li>回到开发者菜单然后选择Reload JS。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Android-5-0及以上\"><a href=\"#Android-5-0及以上\" class=\"headerlink\" title=\"Android 5.0及以上\"></a>Android 5.0及以上</h3><p>使用adb reverse命令</p>\n<ol>\n<li>首先把你的设备通过USB数据线连接到电脑上，并开启USB调试。</li>\n<li>运行adb reverse tcp:8081 tcp:8081</li>\n</ol>\n<p>不需要更多配置，你就可以使用Reload JS和其它的开发选项了。</p>\n<h3 id=\"Android-5-0以下\"><a href=\"#Android-5-0以下\" class=\"headerlink\" title=\"Android 5.0以下\"></a>Android 5.0以下</h3><p>通过Wi-Fi连接你的本地开发服务器</p>\n<ol>\n<li>首先确保你的电脑和手机设备在同一个Wi-Fi环境下。</li>\n<li>在设备上运行你的React Native应用。和打开其它App一样操作。</li>\n<li>你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。</li>\n<li>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。</li>\n<li>点击进入Dev Settings。</li>\n<li>点击Debug server host for device。</li>\n<li>输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。<ul>\n<li>在Mac上，你可以在系统设置/网络里找查询你的IP地址。</li>\n<li>在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。</li>\n<li>在Linux上你可以在终端中输入ifconfig来查询你的IP地址。</li>\n</ul>\n</li>\n<li>回到开发者菜单然后选择Reload JS。</li>\n</ol>\n"},{"title":"Ubuntu常用命令及快捷键","date":"2016-04-25T07:48:15.000Z","description":"常用快捷键: Ctrl+Shift+T 打开terminal终端软件；Ctrl+Alt+F1 切换到第一个工作台；Ctrl+Alt+F7 切换到可视化工作台；Ctrl+D 退出终端打开的程序回到shell环境；Ctrl+L 清屏；Tab键可以自动补齐命令，两次tab键可以查看可补齐的内容","_content":">Linux —— K.I.S.S.\n>>Keep it simple,stupid!\n\n### 常用快捷键\n1. Ctrl+Shift+T 打开terminal终端软件\n2. Ctrl+Alt+F1 切换到第一个工作台\n3. Ctrl+Alt+F7 切换到可视化工作台\n4. Ctrl+D 退出终端打开的程序回到shell环境\n5. Ctrl+L 清屏\n6. Tab键可以自动补齐命令，两次tab键可以查看可补齐的内容\n\n### 常用命令\n1. ls 列出当前目录内容\n2. ls –l dir 查看一个目录下文件的操作权限\n3. ls –ld dir 查看所在目录的操作权限\n4. less 将命令行的内容分页查看，而不是一次性全部输出\n5. ps aux|less 分页查看进程状态\n6. mkdir 创建一个目录(eg: mkdir ttt)\n7. rm 删除一个文件，但不能直接删除目录(eg: rm a.txt)\n8. rm –r 添加-r参数可以删除目录\n9. man+命令：打开某个命令的帮助，具体到某个参数的使用说明，/+参数即可查阅\n10. 重定向（将shell输出到文本）\n```php\necho 'hello' > hello.txt #标准输出\necho 'error' 2> error.txt #错误输出\necho 'world' >> hello.txt #向已有追加内容\n```\n11.   sudo 使用管理员权限执行命令(eg: sudo chmod 777 a.txt)\n12.   chmod修改文件权限（实例说明）：\n```php\nchmod u+x file #给file的属主增加执行权限\nchmod 751 file\n#给file的属主分配读、写、执行(7)的权限，\n#给file的所在组分配读、执行(5)的权限，\n#给其他用户分配执行(1)的权限\nchmod u=rwx,g=rx,o=x file #上例的另一种形式\nchmod =r file #为所有用户分配读权限\nchmod 444 file #同上例\nchmod a-wx,a+r file #同上例\nchmod -R u+r directory #递归地给directory目录下所有文件和子目录的属主分配读的权限\nchmod 4755 #设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。\n```\n","source":"_posts/Ubuntu常用命令及快捷键.md","raw":"---\ntitle: Ubuntu常用命令及快捷键\ndate: 2016-04-25 15:48:15\ndescription: \"常用快捷键: Ctrl+Shift+T 打开terminal终端软件；Ctrl+Alt+F1 切换到第一个工作台；Ctrl+Alt+F7 切换到可视化工作台；Ctrl+D 退出终端打开的程序回到shell环境；Ctrl+L 清屏；Tab键可以自动补齐命令，两次tab键可以查看可补齐的内容\"\ntags:\n- Ubuntu\ncategories:\n- Linux\n---\n>Linux —— K.I.S.S.\n>>Keep it simple,stupid!\n\n### 常用快捷键\n1. Ctrl+Shift+T 打开terminal终端软件\n2. Ctrl+Alt+F1 切换到第一个工作台\n3. Ctrl+Alt+F7 切换到可视化工作台\n4. Ctrl+D 退出终端打开的程序回到shell环境\n5. Ctrl+L 清屏\n6. Tab键可以自动补齐命令，两次tab键可以查看可补齐的内容\n\n### 常用命令\n1. ls 列出当前目录内容\n2. ls –l dir 查看一个目录下文件的操作权限\n3. ls –ld dir 查看所在目录的操作权限\n4. less 将命令行的内容分页查看，而不是一次性全部输出\n5. ps aux|less 分页查看进程状态\n6. mkdir 创建一个目录(eg: mkdir ttt)\n7. rm 删除一个文件，但不能直接删除目录(eg: rm a.txt)\n8. rm –r 添加-r参数可以删除目录\n9. man+命令：打开某个命令的帮助，具体到某个参数的使用说明，/+参数即可查阅\n10. 重定向（将shell输出到文本）\n```php\necho 'hello' > hello.txt #标准输出\necho 'error' 2> error.txt #错误输出\necho 'world' >> hello.txt #向已有追加内容\n```\n11.   sudo 使用管理员权限执行命令(eg: sudo chmod 777 a.txt)\n12.   chmod修改文件权限（实例说明）：\n```php\nchmod u+x file #给file的属主增加执行权限\nchmod 751 file\n#给file的属主分配读、写、执行(7)的权限，\n#给file的所在组分配读、执行(5)的权限，\n#给其他用户分配执行(1)的权限\nchmod u=rwx,g=rx,o=x file #上例的另一种形式\nchmod =r file #为所有用户分配读权限\nchmod 444 file #同上例\nchmod a-wx,a+r file #同上例\nchmod -R u+r directory #递归地给directory目录下所有文件和子目录的属主分配读的权限\nchmod 4755 #设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。\n```\n","slug":"Ubuntu常用命令及快捷键","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzk000c3ghgrgt65eeg","content":"<blockquote>\n<p>Linux —— K.I.S.S.</p>\n<blockquote>\n<p>Keep it simple,stupid!</p>\n</blockquote>\n</blockquote>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><ol>\n<li>Ctrl+Shift+T 打开terminal终端软件</li>\n<li>Ctrl+Alt+F1 切换到第一个工作台</li>\n<li>Ctrl+Alt+F7 切换到可视化工作台</li>\n<li>Ctrl+D 退出终端打开的程序回到shell环境</li>\n<li>Ctrl+L 清屏</li>\n<li>Tab键可以自动补齐命令，两次tab键可以查看可补齐的内容</li>\n</ol>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ol>\n<li>ls 列出当前目录内容</li>\n<li>ls –l dir 查看一个目录下文件的操作权限</li>\n<li>ls –ld dir 查看所在目录的操作权限</li>\n<li>less 将命令行的内容分页查看，而不是一次性全部输出</li>\n<li>ps aux|less 分页查看进程状态</li>\n<li>mkdir 创建一个目录(eg: mkdir ttt)</li>\n<li>rm 删除一个文件，但不能直接删除目录(eg: rm a.txt)</li>\n<li>rm –r 添加-r参数可以删除目录</li>\n<li>man+命令：打开某个命令的帮助，具体到某个参数的使用说明，/+参数即可查阅</li>\n<li><p>重定向（将shell输出到文本）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'hello'</span> &gt; hello.txt <span class=\"comment\">#标准输出</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'error'</span> <span class=\"number\">2</span>&gt; error.txt <span class=\"comment\">#错误输出</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'world'</span> &gt;&gt; hello.txt <span class=\"comment\">#向已有追加内容</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>sudo 使用管理员权限执行命令(eg: sudo chmod 777 a.txt)</p>\n</li>\n<li>chmod修改文件权限（实例说明）：<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod u+x file <span class=\"comment\">#给file的属主增加执行权限</span></div><div class=\"line\">chmod <span class=\"number\">751</span> file</div><div class=\"line\"><span class=\"comment\">#给file的属主分配读、写、执行(7)的权限，</span></div><div class=\"line\"><span class=\"comment\">#给file的所在组分配读、执行(5)的权限，</span></div><div class=\"line\"><span class=\"comment\">#给其他用户分配执行(1)的权限</span></div><div class=\"line\">chmod u=rwx,g=rx,o=x file <span class=\"comment\">#上例的另一种形式</span></div><div class=\"line\">chmod =r file <span class=\"comment\">#为所有用户分配读权限</span></div><div class=\"line\">chmod <span class=\"number\">444</span> file <span class=\"comment\">#同上例</span></div><div class=\"line\">chmod a-wx,a+r file <span class=\"comment\">#同上例</span></div><div class=\"line\">chmod -R u+r directory <span class=\"comment\">#递归地给directory目录下所有文件和子目录的属主分配读的权限</span></div><div class=\"line\">chmod <span class=\"number\">4755</span> <span class=\"comment\">#设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Linux —— K.I.S.S.</p>\n<blockquote>\n<p>Keep it simple,stupid!</p>\n</blockquote>\n</blockquote>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><ol>\n<li>Ctrl+Shift+T 打开terminal终端软件</li>\n<li>Ctrl+Alt+F1 切换到第一个工作台</li>\n<li>Ctrl+Alt+F7 切换到可视化工作台</li>\n<li>Ctrl+D 退出终端打开的程序回到shell环境</li>\n<li>Ctrl+L 清屏</li>\n<li>Tab键可以自动补齐命令，两次tab键可以查看可补齐的内容</li>\n</ol>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ol>\n<li>ls 列出当前目录内容</li>\n<li>ls –l dir 查看一个目录下文件的操作权限</li>\n<li>ls –ld dir 查看所在目录的操作权限</li>\n<li>less 将命令行的内容分页查看，而不是一次性全部输出</li>\n<li>ps aux|less 分页查看进程状态</li>\n<li>mkdir 创建一个目录(eg: mkdir ttt)</li>\n<li>rm 删除一个文件，但不能直接删除目录(eg: rm a.txt)</li>\n<li>rm –r 添加-r参数可以删除目录</li>\n<li>man+命令：打开某个命令的帮助，具体到某个参数的使用说明，/+参数即可查阅</li>\n<li><p>重定向（将shell输出到文本）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'hello'</span> &gt; hello.txt <span class=\"comment\">#标准输出</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'error'</span> <span class=\"number\">2</span>&gt; error.txt <span class=\"comment\">#错误输出</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'world'</span> &gt;&gt; hello.txt <span class=\"comment\">#向已有追加内容</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>sudo 使用管理员权限执行命令(eg: sudo chmod 777 a.txt)</p>\n</li>\n<li>chmod修改文件权限（实例说明）：<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod u+x file <span class=\"comment\">#给file的属主增加执行权限</span></div><div class=\"line\">chmod <span class=\"number\">751</span> file</div><div class=\"line\"><span class=\"comment\">#给file的属主分配读、写、执行(7)的权限，</span></div><div class=\"line\"><span class=\"comment\">#给file的所在组分配读、执行(5)的权限，</span></div><div class=\"line\"><span class=\"comment\">#给其他用户分配执行(1)的权限</span></div><div class=\"line\">chmod u=rwx,g=rx,o=x file <span class=\"comment\">#上例的另一种形式</span></div><div class=\"line\">chmod =r file <span class=\"comment\">#为所有用户分配读权限</span></div><div class=\"line\">chmod <span class=\"number\">444</span> file <span class=\"comment\">#同上例</span></div><div class=\"line\">chmod a-wx,a+r file <span class=\"comment\">#同上例</span></div><div class=\"line\">chmod -R u+r directory <span class=\"comment\">#递归地给directory目录下所有文件和子目录的属主分配读的权限</span></div><div class=\"line\">chmod <span class=\"number\">4755</span> <span class=\"comment\">#设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Xcode 离线下载地址","date":"2017-04-21T02:04:47.000Z","description":"由于 Xcode 体积过大，App Store 下载缓慢，经常导致下载失败，使用迅雷离线下载可以大大加快 Xcode 的下载速度，以下贴出各版本的 Xcode 下载地址，直接将地址拷贝到迅雷即可下载。","_content":"\n由于 Xcode 体积过大，App Store 下载缓慢，经常导致下载失败，使用迅雷离线下载可以大大加快 Xcode 的下载速度，以下贴出各版本的 Xcode 下载地址，直接将地址拷贝到迅雷即可下载。\n\n![xcode](http://is2.mzstatic.com/image/thumb/Purple111/v4/fa/cd/fa/facdfaf5-ade9-f70f-6815-c4863c69cf6e/source/175x175bb.png)\n\n#### Xcode8\n- 8.3.1: http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.1/Xcode_8.3.1.xip\n- 8.2.1：http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip\n- 8.2：http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip\n- 8.1：http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip\n- 8.0：http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip\n#### Xcode7\n- 7.3.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg\n- 7.3：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3/Xcode_7.3.dmg\n- 7.2.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2.1/Xcode_7.2.1.dmg\n- 7.2：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg\n- 7.1.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1.1/Xcode_7.1.1.dmg\n- 7.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1/Xcode_7.1.dmg\n- 7.0：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg\n","source":"_posts/Xcode-离线下载地址.md","raw":"---\ntitle: Xcode 离线下载地址\ndate: 2017-04-21 10:04:47\ndescription: 由于 Xcode 体积过大，App Store 下载缓慢，经常导致下载失败，使用迅雷离线下载可以大大加快 Xcode 的下载速度，以下贴出各版本的 Xcode 下载地址，直接将地址拷贝到迅雷即可下载。\ncategories: \n- Mac\n---\n\n由于 Xcode 体积过大，App Store 下载缓慢，经常导致下载失败，使用迅雷离线下载可以大大加快 Xcode 的下载速度，以下贴出各版本的 Xcode 下载地址，直接将地址拷贝到迅雷即可下载。\n\n![xcode](http://is2.mzstatic.com/image/thumb/Purple111/v4/fa/cd/fa/facdfaf5-ade9-f70f-6815-c4863c69cf6e/source/175x175bb.png)\n\n#### Xcode8\n- 8.3.1: http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.1/Xcode_8.3.1.xip\n- 8.2.1：http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip\n- 8.2：http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip\n- 8.1：http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip\n- 8.0：http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip\n#### Xcode7\n- 7.3.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg\n- 7.3：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3/Xcode_7.3.dmg\n- 7.2.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2.1/Xcode_7.2.1.dmg\n- 7.2：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg\n- 7.1.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1.1/Xcode_7.1.1.dmg\n- 7.1：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1/Xcode_7.1.dmg\n- 7.0：\nhttps://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg\n","slug":"Xcode-离线下载地址","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzm000f3ghgo6t36gw6","content":"<p>由于 Xcode 体积过大，App Store 下载缓慢，经常导致下载失败，使用迅雷离线下载可以大大加快 Xcode 的下载速度，以下贴出各版本的 Xcode 下载地址，直接将地址拷贝到迅雷即可下载。</p>\n<p><img src=\"http://is2.mzstatic.com/image/thumb/Purple111/v4/fa/cd/fa/facdfaf5-ade9-f70f-6815-c4863c69cf6e/source/175x175bb.png\" alt=\"xcode\"></p>\n<h4 id=\"Xcode8\"><a href=\"#Xcode8\" class=\"headerlink\" title=\"Xcode8\"></a>Xcode8</h4><ul>\n<li>8.3.1: <a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.1/Xcode_8.3.1.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.1/Xcode_8.3.1.xip</a></li>\n<li>8.2.1：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip</a></li>\n<li>8.2：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip</a></li>\n<li>8.1：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip</a></li>\n<li>8.0：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip</a><h4 id=\"Xcode7\"><a href=\"#Xcode7\" class=\"headerlink\" title=\"Xcode7\"></a>Xcode7</h4></li>\n<li>7.3.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg</a></li>\n<li>7.3：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3/Xcode_7.3.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3/Xcode_7.3.dmg</a></li>\n<li>7.2.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2.1/Xcode_7.2.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2.1/Xcode_7.2.1.dmg</a></li>\n<li>7.2：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg</a></li>\n<li>7.1.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1.1/Xcode_7.1.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1.1/Xcode_7.1.1.dmg</a></li>\n<li>7.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1/Xcode_7.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1/Xcode_7.1.dmg</a></li>\n<li>7.0：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>由于 Xcode 体积过大，App Store 下载缓慢，经常导致下载失败，使用迅雷离线下载可以大大加快 Xcode 的下载速度，以下贴出各版本的 Xcode 下载地址，直接将地址拷贝到迅雷即可下载。</p>\n<p><img src=\"http://is2.mzstatic.com/image/thumb/Purple111/v4/fa/cd/fa/facdfaf5-ade9-f70f-6815-c4863c69cf6e/source/175x175bb.png\" alt=\"xcode\"></p>\n<h4 id=\"Xcode8\"><a href=\"#Xcode8\" class=\"headerlink\" title=\"Xcode8\"></a>Xcode8</h4><ul>\n<li>8.3.1: <a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.1/Xcode_8.3.1.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.1/Xcode_8.3.1.xip</a></li>\n<li>8.2.1：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip</a></li>\n<li>8.2：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip</a></li>\n<li>8.1：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip</a></li>\n<li>8.0：<a href=\"http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip\" target=\"_blank\" rel=\"external\">http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip</a><h4 id=\"Xcode7\"><a href=\"#Xcode7\" class=\"headerlink\" title=\"Xcode7\"></a>Xcode7</h4></li>\n<li>7.3.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg</a></li>\n<li>7.3：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3/Xcode_7.3.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.3/Xcode_7.3.dmg</a></li>\n<li>7.2.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2.1/Xcode_7.2.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2.1/Xcode_7.2.1.dmg</a></li>\n<li>7.2：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg</a></li>\n<li>7.1.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1.1/Xcode_7.1.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1.1/Xcode_7.1.1.dmg</a></li>\n<li>7.1：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1/Xcode_7.1.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1/Xcode_7.1.dmg</a></li>\n<li>7.0：<br><a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg\" target=\"_blank\" rel=\"external\">https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg</a></li>\n</ul>\n"},{"title":"PHP防盗链技术","date":"2016-04-24T15:39:35.000Z","description":"//通过获取http协议的消息头的REFERER来防盗链 if(isset($_SERVER['HTTP_REFERER'])){//判断REFERER是否为http://localhost开头的","_content":"\n```php\n<?php\n//通过获取http协议的消息头的REFERER来防盗链\nif(isset($_SERVER['HTTP_REFERER'])){//判断REFERER是否为http://localhost开头的\n    if(strpos($_SERVER['HTTP_REFERER'],\"http://localhost\"==0)){//非本网站访问全部封杀\n        echo \"本网站用户，可以或查看链接\";\n    }else{ //否则跳转到警告页面\n        header(\"Location: warning.html\");\n    }\n}else{//否则跳转到警告页面\n    header(\"Location: warning.html\");\n}\n?>\n```\n","source":"_posts/PHP防盗链技术.md","raw":"---\ntitle: PHP防盗链技术\ndate: 2016-04-24 23:39:35\ndescription: \"//通过获取http协议的消息头的REFERER来防盗链 if(isset($_SERVER['HTTP_REFERER'])){//判断REFERER是否为http://localhost开头的\"\ntags:\n- php\n---\n\n```php\n<?php\n//通过获取http协议的消息头的REFERER来防盗链\nif(isset($_SERVER['HTTP_REFERER'])){//判断REFERER是否为http://localhost开头的\n    if(strpos($_SERVER['HTTP_REFERER'],\"http://localhost\"==0)){//非本网站访问全部封杀\n        echo \"本网站用户，可以或查看链接\";\n    }else{ //否则跳转到警告页面\n        header(\"Location: warning.html\");\n    }\n}else{//否则跳转到警告页面\n    header(\"Location: warning.html\");\n}\n?>\n```\n","slug":"PHP防盗链技术","published":1,"updated":"2017-05-10T13:33:47.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzp000i3ghgpx1r0m0g","content":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//通过获取http协议的消息头的REFERER来防盗链</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_SERVER[<span class=\"string\">'HTTP_REFERER'</span>]))&#123;<span class=\"comment\">//判断REFERER是否为http://localhost开头的</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(strpos($_SERVER[<span class=\"string\">'HTTP_REFERER'</span>],<span class=\"string\">\"http://localhost\"</span>==<span class=\"number\">0</span>))&#123;<span class=\"comment\">//非本网站访问全部封杀</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"本网站用户，可以或查看链接\"</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//否则跳转到警告页面</span></div><div class=\"line\">        header(<span class=\"string\">\"Location: warning.html\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//否则跳转到警告页面</span></div><div class=\"line\">    header(<span class=\"string\">\"Location: warning.html\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//通过获取http协议的消息头的REFERER来防盗链</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_SERVER[<span class=\"string\">'HTTP_REFERER'</span>]))&#123;<span class=\"comment\">//判断REFERER是否为http://localhost开头的</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(strpos($_SERVER[<span class=\"string\">'HTTP_REFERER'</span>],<span class=\"string\">\"http://localhost\"</span>==<span class=\"number\">0</span>))&#123;<span class=\"comment\">//非本网站访问全部封杀</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"本网站用户，可以或查看链接\"</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//否则跳转到警告页面</span></div><div class=\"line\">        header(<span class=\"string\">\"Location: warning.html\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//否则跳转到警告页面</span></div><div class=\"line\">    header(<span class=\"string\">\"Location: warning.html\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"html5自定义表单提示","date":"2016-04-24T15:57:06.000Z","description":"html5是目前最新版的超文本标记语言，结合了javascript/css/html使得标签功能更加强大，下面介绍html5自定义表单提示：","_content":"html5是目前最新版的超文本标记语言，结合了javascript/css/html使得标签功能更加强大，下面介绍html5自定义表单提示：\n```html\n<form name=\"passwordChange\">\n    <p>\n        <label for=\"password1\">New Password:</label>\n        <input type=\"password\" id=\"password1\" onchange=\"checkPasswords()\">\n    </p>\n    <p>\n        <label for=\"password2\">Confirm Password:</label>\n        <input type=\"password\" id=\"password2\" onchange=\"checkPasswords()\">\n    </p>\n</form>\n<button onclick=\"document.passwordChange.password1.checkValidity()\">Check Validity</button>\n<script>\n    function checkPasswords() {\n        var pass1 = document.getElementById(\"password1\");\n        var pass2 = document.getElementById(\"password2\");\n        if (pass1.value != pass2.value)\n            pass1.setCustomValidity(\"两次输入的密码不匹配\");\n        else\n            pass1.setCustomValidity(\"\");\n</script>\n```\n","source":"_posts/html5自定义表单提示.md","raw":"---\ntitle: html5自定义表单提示\ndate: 2016-04-24 23:57:06\ndescription: \"html5是目前最新版的超文本标记语言，结合了javascript/css/html使得标签功能更加强大，下面介绍html5自定义表单提示：\"\ntags:\n- html5\ncategories:\n- Front\n---\nhtml5是目前最新版的超文本标记语言，结合了javascript/css/html使得标签功能更加强大，下面介绍html5自定义表单提示：\n```html\n<form name=\"passwordChange\">\n    <p>\n        <label for=\"password1\">New Password:</label>\n        <input type=\"password\" id=\"password1\" onchange=\"checkPasswords()\">\n    </p>\n    <p>\n        <label for=\"password2\">Confirm Password:</label>\n        <input type=\"password\" id=\"password2\" onchange=\"checkPasswords()\">\n    </p>\n</form>\n<button onclick=\"document.passwordChange.password1.checkValidity()\">Check Validity</button>\n<script>\n    function checkPasswords() {\n        var pass1 = document.getElementById(\"password1\");\n        var pass2 = document.getElementById(\"password2\");\n        if (pass1.value != pass2.value)\n            pass1.setCustomValidity(\"两次输入的密码不匹配\");\n        else\n            pass1.setCustomValidity(\"\");\n</script>\n```\n","slug":"html5自定义表单提示","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzs000k3ghg3jzbij3i","content":"<p>html5是目前最新版的超文本标记语言，结合了javascript/css/html使得标签功能更加强大，下面介绍html5自定义表单提示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"passwordChange\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password1\"</span>&gt;</span>New Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password1\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"checkPasswords()\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password2\"</span>&gt;</span>Confirm Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password2\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"checkPasswords()\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.passwordChange.password1.checkValidity()\"</span>&gt;</span>Check Validity<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    function checkPasswords() &#123;</div><div class=\"line\">        var pass1 = document.getElementById(\"password1\");</div><div class=\"line\">        var pass2 = document.getElementById(\"password2\");</div><div class=\"line\">        if (pass1.value != pass2.value)</div><div class=\"line\">            pass1.setCustomValidity(\"两次输入的密码不匹配\");</div><div class=\"line\">        else</div><div class=\"line\">            pass1.setCustomValidity(\"\");</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>html5是目前最新版的超文本标记语言，结合了javascript/css/html使得标签功能更加强大，下面介绍html5自定义表单提示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"passwordChange\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password1\"</span>&gt;</span>New Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password1\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"checkPasswords()\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password2\"</span>&gt;</span>Confirm Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password2\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"checkPasswords()\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"document.passwordChange.password1.checkValidity()\"</span>&gt;</span>Check Validity<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    function checkPasswords() &#123;</div><div class=\"line\">        var pass1 = document.getElementById(\"password1\");</div><div class=\"line\">        var pass2 = document.getElementById(\"password2\");</div><div class=\"line\">        if (pass1.value != pass2.value)</div><div class=\"line\">            pass1.setCustomValidity(\"两次输入的密码不匹配\");</div><div class=\"line\">        else</div><div class=\"line\">            pass1.setCustomValidity(\"\");</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n"},{"title":"mongodb的基本操作（CRUD）","date":"2016-04-25T16:34:11.000Z","description":"show dbs 查看当前系统的数据库，use test 切换到test数据库（如不存在就创建），db.dropDatabase() 删除当前所在的数据库，db.user.insert({name:'Mickle'}) 创建user集合并插入一条数据，show collections 查看当前数据库中的所有集合","_content":"1.\tshow dbs 查看当前系统的数据库\n2.\tuse test 切换到test数据库（如不存在就创建）\n3.\tdb.dropDatabase() 删除当前所在的数据库\n4.\tdb.user.insert({name:'Mickle'}) 创建user集合并插入一条数据\n5.\tshow collections 查看当前数据库中的所有集合\n6.\tdb.user.find()查看集合中的数据，'\\_id'索引由系统自动生成，也可以自己指定\n7.\tdb.user.find({name:'Mickle'}) 在集合中查找Mickle的数据\n8.\t在mongodb可以使用js语法插入多条数据：\n```js\nfor(i=0;i<100;i++) db.user.insert({name:'user'+i})\n```\n9.\tdb.user.find().count() 计算集合中的数据条目\n10.\tdb.user.find().skip(3).limit(2)选择第4条和第5条记录\n11.\tdb.user.update({name:'Mickle'},{name:'Anmy'}) 更新数据\n12.\t只修改一条记录中的其中一项数据，如{x:100,y:100,z:100}，如下：\ndb.test.update({z:100}，{$set:{y:99}}) 使用$set部分更新符\n只将z为100中的y值修改为99\n13.\tdb.user.update({name:'aaa'},{name:'Mickle'},true)\n第三个参数为true时表示，如果数据aaa不存在则插入一条Mickle数据\n14. 为了防止误操作，mongodb的update操作只会更新第一条数据，必须将第四个参数设置为true，才会执行批量更新操作，并且只能使用部分更新$set进行操作：db.test.update({x:1},{$set{y:99}}),false,true)\n15.\tdb.user.remove({name:'user0'}) 删除name为user0的数据\n16.\tdb.user.drop() 删除选择的集合\n","source":"_posts/mongodb的基本操作（CRUD）.md","raw":"---\ntitle: mongodb的基本操作（CRUD）\ndate: 2016-04-26 00:34:11\ndescription: \"show dbs 查看当前系统的数据库，use test 切换到test数据库（如不存在就创建），db.dropDatabase() 删除当前所在的数据库，db.user.insert({name:'Mickle'}) 创建user集合并插入一条数据，show collections 查看当前数据库中的所有集合\"\ntags:\n- mongodb\ncategories:\n- Database\n---\n1.\tshow dbs 查看当前系统的数据库\n2.\tuse test 切换到test数据库（如不存在就创建）\n3.\tdb.dropDatabase() 删除当前所在的数据库\n4.\tdb.user.insert({name:'Mickle'}) 创建user集合并插入一条数据\n5.\tshow collections 查看当前数据库中的所有集合\n6.\tdb.user.find()查看集合中的数据，'\\_id'索引由系统自动生成，也可以自己指定\n7.\tdb.user.find({name:'Mickle'}) 在集合中查找Mickle的数据\n8.\t在mongodb可以使用js语法插入多条数据：\n```js\nfor(i=0;i<100;i++) db.user.insert({name:'user'+i})\n```\n9.\tdb.user.find().count() 计算集合中的数据条目\n10.\tdb.user.find().skip(3).limit(2)选择第4条和第5条记录\n11.\tdb.user.update({name:'Mickle'},{name:'Anmy'}) 更新数据\n12.\t只修改一条记录中的其中一项数据，如{x:100,y:100,z:100}，如下：\ndb.test.update({z:100}，{$set:{y:99}}) 使用$set部分更新符\n只将z为100中的y值修改为99\n13.\tdb.user.update({name:'aaa'},{name:'Mickle'},true)\n第三个参数为true时表示，如果数据aaa不存在则插入一条Mickle数据\n14. 为了防止误操作，mongodb的update操作只会更新第一条数据，必须将第四个参数设置为true，才会执行批量更新操作，并且只能使用部分更新$set进行操作：db.test.update({x:1},{$set{y:99}}),false,true)\n15.\tdb.user.remove({name:'user0'}) 删除name为user0的数据\n16.\tdb.user.drop() 删除选择的集合\n","slug":"mongodb的基本操作（CRUD）","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzu000o3ghg8xh9bezj","content":"<ol>\n<li>show dbs 查看当前系统的数据库</li>\n<li>use test 切换到test数据库（如不存在就创建）</li>\n<li>db.dropDatabase() 删除当前所在的数据库</li>\n<li>db.user.insert({name:’Mickle’}) 创建user集合并插入一条数据</li>\n<li>show collections 查看当前数据库中的所有集合</li>\n<li>db.user.find()查看集合中的数据，’_id’索引由系统自动生成，也可以自己指定</li>\n<li>db.user.find({name:’Mickle’}) 在集合中查找Mickle的数据</li>\n<li><p>在mongodb可以使用js语法插入多条数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++) db.user.insert(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user'</span>+i&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>db.user.find().count() 计算集合中的数据条目</p>\n</li>\n<li>db.user.find().skip(3).limit(2)选择第4条和第5条记录</li>\n<li>db.user.update({name:’Mickle’},{name:’Anmy’}) 更新数据</li>\n<li>只修改一条记录中的其中一项数据，如{x:100,y:100,z:100}，如下：<br>db.test.update({z:100}，{$set:{y:99}}) 使用$set部分更新符<br>只将z为100中的y值修改为99</li>\n<li>db.user.update({name:’aaa’},{name:’Mickle’},true)<br>第三个参数为true时表示，如果数据aaa不存在则插入一条Mickle数据</li>\n<li>为了防止误操作，mongodb的update操作只会更新第一条数据，必须将第四个参数设置为true，才会执行批量更新操作，并且只能使用部分更新$set进行操作：db.test.update({x:1},{$set{y:99}}),false,true)</li>\n<li>db.user.remove({name:’user0’}) 删除name为user0的数据</li>\n<li>db.user.drop() 删除选择的集合</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>show dbs 查看当前系统的数据库</li>\n<li>use test 切换到test数据库（如不存在就创建）</li>\n<li>db.dropDatabase() 删除当前所在的数据库</li>\n<li>db.user.insert({name:’Mickle’}) 创建user集合并插入一条数据</li>\n<li>show collections 查看当前数据库中的所有集合</li>\n<li>db.user.find()查看集合中的数据，’_id’索引由系统自动生成，也可以自己指定</li>\n<li>db.user.find({name:’Mickle’}) 在集合中查找Mickle的数据</li>\n<li><p>在mongodb可以使用js语法插入多条数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++) db.user.insert(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'user'</span>+i&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>db.user.find().count() 计算集合中的数据条目</p>\n</li>\n<li>db.user.find().skip(3).limit(2)选择第4条和第5条记录</li>\n<li>db.user.update({name:’Mickle’},{name:’Anmy’}) 更新数据</li>\n<li>只修改一条记录中的其中一项数据，如{x:100,y:100,z:100}，如下：<br>db.test.update({z:100}，{$set:{y:99}}) 使用$set部分更新符<br>只将z为100中的y值修改为99</li>\n<li>db.user.update({name:’aaa’},{name:’Mickle’},true)<br>第三个参数为true时表示，如果数据aaa不存在则插入一条Mickle数据</li>\n<li>为了防止误操作，mongodb的update操作只会更新第一条数据，必须将第四个参数设置为true，才会执行批量更新操作，并且只能使用部分更新$set进行操作：db.test.update({x:1},{$set{y:99}}),false,true)</li>\n<li>db.user.remove({name:’user0’}) 删除name为user0的数据</li>\n<li>db.user.drop() 删除选择的集合</li>\n</ol>\n"},{"title":"ubuntu搭建svn服务器","date":"2016-05-02T14:29:03.000Z","description":"安装SVN apt-get install subversion 建立svn仓库 svnadmin create /home/.svn/zeven","_content":"1. 安装SVN\n  ```shell\n  apt-get install subversion\n  ```\n2. 建立svn仓库\n    ```shell\n    mkdir /home/.svn #使用隐藏目录建立svn目录\n    cd /home/.svn\n    mkdir zeven #创建仓库目录\n    svnadmin create /home/.svn/zeven #初始化目录为svn仓库\n    #执行完毕后zeven目录有svnadmin创建的目录和文件\n    ```\n3. 配置和管理svn\n\n  - 每个仓库的配置文件在$repos/conf/下，vi svnserve.conf，配置项在[general]下:\n  ```\n  anon-access：匿名用户的权限，可以为read，write和none，默认值read。不允许匿名用户访问设置为none\n  auth-access：认证用户的权限，可以为read，write和none，默认值write。\n  password-db：密码数据库的路径，去掉前边的#\n  authz-db：认证规则库的路径，去掉前边的#。\n  注意：这些配置项的行都要顶格，否则会报错。修改配置后需要重启svn才能生效。\n  ```\n  - 配置passwd文件\n\n        这是每个用户的密码文件，比较简单，就是“用户名=密码”，采用的是明码。如fang=123456\n\n4. 设置权限，配置authz文件\n\n  - [groups] section：为了便于管理，可以将一些用户放到一个组里边，比如：owner=zeven,fang\n\n  - groups下边的sections表示对一个目录的认证规则，比如对根目录的认证规则的section为[/]。设置单用户的认证规则时一个用户一行，如：\n  ```shell\n[/]\nallen=rw　　#allen对根目录的权限为rw\nellen=r　　  #ellen对根目录的权限为r\n#如果使用group，需要在group名字前加@,如\n@owner=rw　　#group owner中的用户均为rw，等价于上边的两句话\n  ```\n  - 启动时如果从/home/.svn/astar启动，/就是astar目录，用如上方式以astar目录为根设置权限。\n\n  - 如果从/home/.svn/启动，每个仓库根还是自己的起始目录。可以采用如上方式设置astar的权限，也可以采用如下方式：\n  ```shell\n  [astar:/]\n  @owner=rw\n  #设置test的权限如下：\n  [test:/]\n  @harry_and_sally = rw\n  ```\n  - 简言之，每个仓库的根目录(/)就是自己的起始目录；[repos:/]这种方式只适用于多仓库的情况；[/]适合于单仓库和单仓库的方式，不能跨越仓库设置权限。\n","source":"_posts/ubuntu搭建svn服务器.md","raw":"---\ntitle: ubuntu搭建svn服务器\ndate: 2016-05-02 22:29:03\ndescription: \"安装SVN apt-get install subversion 建立svn仓库 svnadmin create /home/.svn/zeven\"\ncategories:\n- Linux\ntags:\n- Ubuntu\n- svn\n---\n1. 安装SVN\n  ```shell\n  apt-get install subversion\n  ```\n2. 建立svn仓库\n    ```shell\n    mkdir /home/.svn #使用隐藏目录建立svn目录\n    cd /home/.svn\n    mkdir zeven #创建仓库目录\n    svnadmin create /home/.svn/zeven #初始化目录为svn仓库\n    #执行完毕后zeven目录有svnadmin创建的目录和文件\n    ```\n3. 配置和管理svn\n\n  - 每个仓库的配置文件在$repos/conf/下，vi svnserve.conf，配置项在[general]下:\n  ```\n  anon-access：匿名用户的权限，可以为read，write和none，默认值read。不允许匿名用户访问设置为none\n  auth-access：认证用户的权限，可以为read，write和none，默认值write。\n  password-db：密码数据库的路径，去掉前边的#\n  authz-db：认证规则库的路径，去掉前边的#。\n  注意：这些配置项的行都要顶格，否则会报错。修改配置后需要重启svn才能生效。\n  ```\n  - 配置passwd文件\n\n        这是每个用户的密码文件，比较简单，就是“用户名=密码”，采用的是明码。如fang=123456\n\n4. 设置权限，配置authz文件\n\n  - [groups] section：为了便于管理，可以将一些用户放到一个组里边，比如：owner=zeven,fang\n\n  - groups下边的sections表示对一个目录的认证规则，比如对根目录的认证规则的section为[/]。设置单用户的认证规则时一个用户一行，如：\n  ```shell\n[/]\nallen=rw　　#allen对根目录的权限为rw\nellen=r　　  #ellen对根目录的权限为r\n#如果使用group，需要在group名字前加@,如\n@owner=rw　　#group owner中的用户均为rw，等价于上边的两句话\n  ```\n  - 启动时如果从/home/.svn/astar启动，/就是astar目录，用如上方式以astar目录为根设置权限。\n\n  - 如果从/home/.svn/启动，每个仓库根还是自己的起始目录。可以采用如上方式设置astar的权限，也可以采用如下方式：\n  ```shell\n  [astar:/]\n  @owner=rw\n  #设置test的权限如下：\n  [test:/]\n  @harry_and_sally = rw\n  ```\n  - 简言之，每个仓库的根目录(/)就是自己的起始目录；[repos:/]这种方式只适用于多仓库的情况；[/]适合于单仓库和单仓库的方式，不能跨越仓库设置权限。\n","slug":"ubuntu搭建svn服务器","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngphzx000s3ghgx4jwfu6e","content":"<ol>\n<li><p>安装SVN</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install subversion</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立svn仓库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /home/.svn #使用隐藏目录建立svn目录</div><div class=\"line\">cd /home/.svn</div><div class=\"line\">mkdir zeven #创建仓库目录</div><div class=\"line\">svnadmin create /home/.svn/zeven #初始化目录为svn仓库</div><div class=\"line\"><span class=\"meta\">#</span>执行完毕后zeven目录有svnadmin创建的目录和文件</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置和管理svn</p>\n<ul>\n<li><p>每个仓库的配置文件在$repos/conf/下，vi svnserve.conf，配置项在[general]下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">anon-access：匿名用户的权限，可以为read，write和none，默认值read。不允许匿名用户访问设置为none</div><div class=\"line\">auth-access：认证用户的权限，可以为read，write和none，默认值write。</div><div class=\"line\">password-db：密码数据库的路径，去掉前边的#</div><div class=\"line\">authz-db：认证规则库的路径，去掉前边的#。</div><div class=\"line\">注意：这些配置项的行都要顶格，否则会报错。修改配置后需要重启svn才能生效。</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置passwd文件</p>\n<p>   这是每个用户的密码文件，比较简单，就是“用户名=密码”，采用的是明码。如fang=123456</p>\n</li>\n</ul>\n</li>\n<li><p>设置权限，配置authz文件</p>\n<ul>\n<li><p>[groups] section：为了便于管理，可以将一些用户放到一个组里边，比如：owner=zeven,fang</p>\n</li>\n<li><p>groups下边的sections表示对一个目录的认证规则，比如对根目录的认证规则的section为[/]。设置单用户的认证规则时一个用户一行，如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[/]</div><div class=\"line\">allen=rw　　#allen对根目录的权限为rw</div><div class=\"line\">ellen=r　　  #ellen对根目录的权限为r</div><div class=\"line\"><span class=\"meta\">#</span>如果使用group，需要在group名字前加@,如</div><div class=\"line\">@owner=rw　　#group owner中的用户均为rw，等价于上边的两句话</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动时如果从/home/.svn/astar启动，/就是astar目录，用如上方式以astar目录为根设置权限。</p>\n</li>\n<li><p>如果从/home/.svn/启动，每个仓库根还是自己的起始目录。可以采用如上方式设置astar的权限，也可以采用如下方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[astar:/]</div><div class=\"line\">@owner=rw</div><div class=\"line\"><span class=\"meta\">#</span>设置test的权限如下：</div><div class=\"line\">[test:/]</div><div class=\"line\">@harry_and_sally = rw</div></pre></td></tr></table></figure>\n</li>\n<li><p>简言之，每个仓库的根目录(/)就是自己的起始目录；[repos:/]这种方式只适用于多仓库的情况；[/]适合于单仓库和单仓库的方式，不能跨越仓库设置权限。</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>安装SVN</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install subversion</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立svn仓库</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /home/.svn #使用隐藏目录建立svn目录</div><div class=\"line\">cd /home/.svn</div><div class=\"line\">mkdir zeven #创建仓库目录</div><div class=\"line\">svnadmin create /home/.svn/zeven #初始化目录为svn仓库</div><div class=\"line\"><span class=\"meta\">#</span>执行完毕后zeven目录有svnadmin创建的目录和文件</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置和管理svn</p>\n<ul>\n<li><p>每个仓库的配置文件在$repos/conf/下，vi svnserve.conf，配置项在[general]下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">anon-access：匿名用户的权限，可以为read，write和none，默认值read。不允许匿名用户访问设置为none</div><div class=\"line\">auth-access：认证用户的权限，可以为read，write和none，默认值write。</div><div class=\"line\">password-db：密码数据库的路径，去掉前边的#</div><div class=\"line\">authz-db：认证规则库的路径，去掉前边的#。</div><div class=\"line\">注意：这些配置项的行都要顶格，否则会报错。修改配置后需要重启svn才能生效。</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置passwd文件</p>\n<p>   这是每个用户的密码文件，比较简单，就是“用户名=密码”，采用的是明码。如fang=123456</p>\n</li>\n</ul>\n</li>\n<li><p>设置权限，配置authz文件</p>\n<ul>\n<li><p>[groups] section：为了便于管理，可以将一些用户放到一个组里边，比如：owner=zeven,fang</p>\n</li>\n<li><p>groups下边的sections表示对一个目录的认证规则，比如对根目录的认证规则的section为[/]。设置单用户的认证规则时一个用户一行，如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[/]</div><div class=\"line\">allen=rw　　#allen对根目录的权限为rw</div><div class=\"line\">ellen=r　　  #ellen对根目录的权限为r</div><div class=\"line\"><span class=\"meta\">#</span>如果使用group，需要在group名字前加@,如</div><div class=\"line\">@owner=rw　　#group owner中的用户均为rw，等价于上边的两句话</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动时如果从/home/.svn/astar启动，/就是astar目录，用如上方式以astar目录为根设置权限。</p>\n</li>\n<li><p>如果从/home/.svn/启动，每个仓库根还是自己的起始目录。可以采用如上方式设置astar的权限，也可以采用如下方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[astar:/]</div><div class=\"line\">@owner=rw</div><div class=\"line\"><span class=\"meta\">#</span>设置test的权限如下：</div><div class=\"line\">[test:/]</div><div class=\"line\">@harry_and_sally = rw</div></pre></td></tr></table></figure>\n</li>\n<li><p>简言之，每个仓库的根目录(/)就是自己的起始目录；[repos:/]这种方式只适用于多仓库的情况；[/]适合于单仓库和单仓库的方式，不能跨越仓库设置权限。</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"ubuntu搭建git服务器","date":"2016-04-24T09:12:31.000Z","description":"服务器操作：安装git，apt-get install git；创建git用户和git用户组，分配目录/home/git，然后:；在/home/git下创建.ssh文件夹；在.ssh下创建authorized_keys文件，如果无效查看/etc/ssh/sshd_config文件一行：（AuthorizedKeysFile      %h/.ssh/authorized_keys）有没有被注释掉，重启ssh服务，service ssh restart","_content":"### 服务器操作\n\n1. 安装git，apt-get install git\n\n2. 创建git用户和git用户组，分配目录/home/git，然后:\n   ```\n   $ vim /etc/passwd\n   ```\n   将：git:x:1003:1003::/home/git:\n   改成：git:x:1003:1003::/home/git:/usr/bin/git-shell\n   禁用git用户的shell\n\n3. 在/home/git下创建.ssh文件夹\n\n4. 在.ssh下创建authorized_keys文件，如果无效查看/etc/ssh/sshd_config文件一行：（AuthorizedKeysFile      %h/.ssh/authorized_keys）有没有被注释掉，重启ssh服务，service ssh restart\n\n### 客户端操作\n\n5. 配置git用户信息\n\t  ```\n  $ git config --global user.name=username\n  $ git config --alobal user.email=user@domain.com\n    ```\n\n6. 使用keygen在客户端生成公钥，命令如下：\n    ```\n    $ ssh-keygen -t rsa\n    ```\n    剩下按提示走（一般询问三次，1.公钥存放地址，2.设置密码，3.重复设置的密码）\n\n### 服务器操作\n\n7. 将生成的id_rsa.pub上传到服务器上，然后将内容粘贴到authorized_keys文件中，不要采用记事本打开，使用命令cat id_rsa.pub >>authorized_keys\n\n8. 在/home/git目录下，创建仓库sample.git：\n    ```\n    $ git init --bare sample.git\n    ```\n    别忘了授予git拥有目录的权限，否则push代码时候会报没写入权限的错\n    ```\n    $ chown -R git:git sample.git\n    ```\n\n### 客户端操作\n\n9. 测试是否成功连接上git server\n\t ```\n   $ ssh -T git@hostname:sample.git\n   ```\n   如果有Welcome什么的就是成功了，但是没法使用bash\n\n10. 可以克隆git仓库到本地啦，运行：\n    ```\n    $ git clone git@hostname:sample.git\n    ```\n    会询问一次第6步设置的密码，成功校验就可以clone成功！\n","source":"_posts/ubuntu搭建git服务器.md","raw":"---\ntitle: ubuntu搭建git服务器\ndate: 2016-04-24 17:12:31\ndescription: \"服务器操作：安装git，apt-get install git；创建git用户和git用户组，分配目录/home/git，然后:；在/home/git下创建.ssh文件夹；在.ssh下创建authorized_keys文件，如果无效查看/etc/ssh/sshd_config文件一行：（AuthorizedKeysFile      %h/.ssh/authorized_keys）有没有被注释掉，重启ssh服务，service ssh restart\"\ncategories:\n- Linux\ntags:\n- Ubuntu\n- git\n---\n### 服务器操作\n\n1. 安装git，apt-get install git\n\n2. 创建git用户和git用户组，分配目录/home/git，然后:\n   ```\n   $ vim /etc/passwd\n   ```\n   将：git:x:1003:1003::/home/git:\n   改成：git:x:1003:1003::/home/git:/usr/bin/git-shell\n   禁用git用户的shell\n\n3. 在/home/git下创建.ssh文件夹\n\n4. 在.ssh下创建authorized_keys文件，如果无效查看/etc/ssh/sshd_config文件一行：（AuthorizedKeysFile      %h/.ssh/authorized_keys）有没有被注释掉，重启ssh服务，service ssh restart\n\n### 客户端操作\n\n5. 配置git用户信息\n\t  ```\n  $ git config --global user.name=username\n  $ git config --alobal user.email=user@domain.com\n    ```\n\n6. 使用keygen在客户端生成公钥，命令如下：\n    ```\n    $ ssh-keygen -t rsa\n    ```\n    剩下按提示走（一般询问三次，1.公钥存放地址，2.设置密码，3.重复设置的密码）\n\n### 服务器操作\n\n7. 将生成的id_rsa.pub上传到服务器上，然后将内容粘贴到authorized_keys文件中，不要采用记事本打开，使用命令cat id_rsa.pub >>authorized_keys\n\n8. 在/home/git目录下，创建仓库sample.git：\n    ```\n    $ git init --bare sample.git\n    ```\n    别忘了授予git拥有目录的权限，否则push代码时候会报没写入权限的错\n    ```\n    $ chown -R git:git sample.git\n    ```\n\n### 客户端操作\n\n9. 测试是否成功连接上git server\n\t ```\n   $ ssh -T git@hostname:sample.git\n   ```\n   如果有Welcome什么的就是成功了，但是没法使用bash\n\n10. 可以克隆git仓库到本地啦，运行：\n    ```\n    $ git clone git@hostname:sample.git\n    ```\n    会询问一次第6步设置的密码，成功校验就可以clone成功！\n","slug":"ubuntu搭建git服务器","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi00000w3ghg7lnh10kh","content":"<h3 id=\"服务器操作\"><a href=\"#服务器操作\" class=\"headerlink\" title=\"服务器操作\"></a>服务器操作</h3><ol>\n<li><p>安装git，apt-get install git</p>\n</li>\n<li><p>创建git用户和git用户组，分配目录/home/git，然后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/passwd</div></pre></td></tr></table></figure>\n<p>将：git:x:1003:1003::/home/git:<br>改成：git:x:1003:1003::/home/git:/usr/bin/git-shell<br>禁用git用户的shell</p>\n</li>\n<li><p>在/home/git下创建.ssh文件夹</p>\n</li>\n<li><p>在.ssh下创建authorized_keys文件，如果无效查看/etc/ssh/sshd_config文件一行：（AuthorizedKeysFile      %h/.ssh/authorized_keys）有没有被注释掉，重启ssh服务，service ssh restart</p>\n</li>\n</ol>\n<h3 id=\"客户端操作\"><a href=\"#客户端操作\" class=\"headerlink\" title=\"客户端操作\"></a>客户端操作</h3><ol>\n<li><p>配置git用户信息</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name=username</div><div class=\"line\">$ git config --alobal user.email=user@domain.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用keygen在客户端生成公钥，命令如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa</div></pre></td></tr></table></figure>\n<p> 剩下按提示走（一般询问三次，1.公钥存放地址，2.设置密码，3.重复设置的密码）</p>\n</li>\n</ol>\n<h3 id=\"服务器操作-1\"><a href=\"#服务器操作-1\" class=\"headerlink\" title=\"服务器操作\"></a>服务器操作</h3><ol>\n<li><p>将生成的id_rsa.pub上传到服务器上，然后将内容粘贴到authorized_keys文件中，不要采用记事本打开，使用命令cat id_rsa.pub &gt;&gt;authorized_keys</p>\n</li>\n<li><p>在/home/git目录下，创建仓库sample.git：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init --bare sample.git</div></pre></td></tr></table></figure>\n<p> 别忘了授予git拥有目录的权限，否则push代码时候会报没写入权限的错</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -R git:git sample.git</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"客户端操作-1\"><a href=\"#客户端操作-1\" class=\"headerlink\" title=\"客户端操作\"></a>客户端操作</h3><ol>\n<li><p>测试是否成功连接上git server</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@hostname:sample.git</div></pre></td></tr></table></figure>\n<p>如果有Welcome什么的就是成功了，但是没法使用bash</p>\n</li>\n<li><p>可以克隆git仓库到本地啦，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git@hostname:sample.git</div></pre></td></tr></table></figure>\n<p>会询问一次第6步设置的密码，成功校验就可以clone成功！</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"服务器操作\"><a href=\"#服务器操作\" class=\"headerlink\" title=\"服务器操作\"></a>服务器操作</h3><ol>\n<li><p>安装git，apt-get install git</p>\n</li>\n<li><p>创建git用户和git用户组，分配目录/home/git，然后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/passwd</div></pre></td></tr></table></figure>\n<p>将：git:x:1003:1003::/home/git:<br>改成：git:x:1003:1003::/home/git:/usr/bin/git-shell<br>禁用git用户的shell</p>\n</li>\n<li><p>在/home/git下创建.ssh文件夹</p>\n</li>\n<li><p>在.ssh下创建authorized_keys文件，如果无效查看/etc/ssh/sshd_config文件一行：（AuthorizedKeysFile      %h/.ssh/authorized_keys）有没有被注释掉，重启ssh服务，service ssh restart</p>\n</li>\n</ol>\n<h3 id=\"客户端操作\"><a href=\"#客户端操作\" class=\"headerlink\" title=\"客户端操作\"></a>客户端操作</h3><ol>\n<li><p>配置git用户信息</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name=username</div><div class=\"line\">$ git config --alobal user.email=user@domain.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用keygen在客户端生成公钥，命令如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa</div></pre></td></tr></table></figure>\n<p> 剩下按提示走（一般询问三次，1.公钥存放地址，2.设置密码，3.重复设置的密码）</p>\n</li>\n</ol>\n<h3 id=\"服务器操作-1\"><a href=\"#服务器操作-1\" class=\"headerlink\" title=\"服务器操作\"></a>服务器操作</h3><ol>\n<li><p>将生成的id_rsa.pub上传到服务器上，然后将内容粘贴到authorized_keys文件中，不要采用记事本打开，使用命令cat id_rsa.pub &gt;&gt;authorized_keys</p>\n</li>\n<li><p>在/home/git目录下，创建仓库sample.git：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init --bare sample.git</div></pre></td></tr></table></figure>\n<p> 别忘了授予git拥有目录的权限，否则push代码时候会报没写入权限的错</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -R git:git sample.git</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"客户端操作-1\"><a href=\"#客户端操作-1\" class=\"headerlink\" title=\"客户端操作\"></a>客户端操作</h3><ol>\n<li><p>测试是否成功连接上git server</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@hostname:sample.git</div></pre></td></tr></table></figure>\n<p>如果有Welcome什么的就是成功了，但是没法使用bash</p>\n</li>\n<li><p>可以克隆git仓库到本地啦，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git@hostname:sample.git</div></pre></td></tr></table></figure>\n<p>会询问一次第6步设置的密码，成功校验就可以clone成功！</p>\n</li>\n</ol>\n"},{"title":"前端技术资源合集","date":"2016-04-24T12:36:01.000Z","description":"HTML5的出现，赋予了前端更多重要的任务，不再停留在平面设计阶段了，更多关注在用户的交互性上和网站的响应速度上。主要是对网页页面视觉效果上的设计，具体通过运用html/css来对页面排版和配色，现在已经有很多成形的框架来帮助前端工程师搭建一个高大上的网站。","_content":"> 前端对于网站来说，通常是指，网站的前台部分包括网站的表现层和结构层。因此前端技术一般分为前端设计和前端开发，前端设计一般可以理解为网站的视觉设计，前端开发则是网站的前台代码实现，包括基本的HTML和CSS以及JavaScript/ajax，现在最新的高级版本HTML5、CSS3，以及SVG等。\n>>—— From Baidu Baike\n\nHTML5的出现，赋予了前端更多重要的任务，不再停留在平面设计阶段了，更多关注在用户的交互性上和网站的响应速度上。\n\n### 前端设计\n主要是对网页页面视觉效果上的设计，具体通过运用html/css来对页面排版和配色，现在已经有很多成形的框架来帮助前端工程师搭建一个高大上的网站：\n\nbootstrap：[http://getbootstrap.com/](http://getbootstrap.com/)\n\nfoundation：[http://foundation.zurb.com/](http://foundation.zurb.com/)\n\nSemanticUI: [http://semantic-ui.com/](http://semantic-ui.com/)\n\n以上框架都是响应式布局框架，能够对不同屏幕适配，对比以上三个框架，bootstrap比较简洁大方，更适合做pc网站，而foundation优先支持手机适配，并且可以自定化下载的功能模块，大大缩小框架的大小，对于跑流量的手机网站更为适合，Semantic UI的设计相当的语义化，容易理解也不用同时使用一大堆样式来显示一个div，最适合开发页面（个人认为…），而且对手机页面支持也做得很好。\n\n### 前端开发\n主要提供数据交互和提高用户的交互体验，甚至可以定义路由，主导页面的跳转（没有做前后端分离，页面一般由后端Controller跳转），熟练使用JavaScript语言相当重要。\n\n当然现在也有大量可靠的框架了，最常用框架有Extjs\n\nExtjs，用过一周，然后就果断抛弃了，Extjs可以用来做通用后台管理系统，用js即可定义一个表单，定义一个Form对象，然后定义表单字段，甚至一个xtype:'htmleditor'即可整合一个在线编辑器到表单中，但是样式也是在js中定义好的，基本上一成不变，很难改变样式，而且页面也是由多个iframe组成，对浏览器渲染很不友好，对话框和按钮也是一层一层嵌套进去，代码中间会产生一个很长的缩进。\n\nJQuery和Zepto.js放一起讲，因为Zepto 的 API 就是完全兼容 jQuery 的，功能上 Zepto 是 jQuery 的子集，定位上 jQuery 桌面为主，Zepto 则从一开始就定位移动设备，所以体积方面有一定优势。也就是说如果你只用了 jQuery 很少且都是核心的功能，比如选择器等，那么可以在不改动任何业务代码的情况下把 lib 切换到 Zepto——其实就是把 $ 对象换掉了。JQuery帮助文档：[http://api.jquery.com/](http://api.jquery.com/)\n\n[AngularJs](https://angularjs.org/)，MVVM双向数据绑定框架，目前由Google在维护的框架。Google出品必属精品（比如：安卓平台），AngularJs是一个十分强大的框架，思想十分前卫，为前后端分离做出巨大的贡献，集成了自身一套的模板引擎，通过{{ data }}就可以在页面上拿到js模板中$scope(作用域)绑定的数据(data)，可以定义过滤器，也有内置的过滤器，比如时间格式转换{timestamp|date:'YYYY-MM-DD'}，可以自定义指令等等……\n\n但是最强大的是Angular提供的模块化(Module)设计，因此[Angular社区](http://ngmodules.org/modules)上有很多强大的开源第三方模块：\n\n[ui-router](http://ngmodules.org/modules/ui-router)，尽管Angular自带了路由控制的一套机制，但是还是不够完善，ui-router是专门控制路由的模块，支持多层级路由无限的嵌套，帮助文档[传送门](http://angular-ui.github.io/ui-router/site/#/api/ui.router)。\n\n[ocLazyLoad](http://ngmodules.org/modules/ocLazyLoad)，可以配合ui-router按需加载文件到页面上，但是路由跳转后不会删除引入的文件，可以通过Dom操作来删除script或link节点，使用懒加载不会让所有文件一次性加载，页面也不会显得太过臃肿，帮助文档[传送门](https://oclazyload.readme.io/docs)。\n\n[ngCordova](http://ngmodules.org/modules/ng-cordova)，配合cordova开发可以开发出跨平台移动应用，Android/iOS/WinPhone，甚至黑莓OS……，打包成phonegap应用，简直方便到没人性，使用cordova最好对打包的平台有所了解，帮助文档[传送门](http://ngcordova.com/docs/plugins/)。\n\n### 后端技术\n\n一个不懂后端的前端不是好前端，半年前我只接触后端的开发，开发过J2EE(SpringMVC+Hibernate)/PHP(ThinkPHP)/Python(半吊子)，了解后端对前端开发十分重要，因为前后端分离后，前端只管ajax向后端要json数据，后端只需要提供相应的api就够了，所以了解后端如何从数据库查数据并且序列化成json数据相当重要。同时要了解HTTP 1.1的协议，了解请求头、请求体、响应头、响应体，方便从调试工具中查看提交的数据和返回的数据，方便对bug的定位。\n\n作为一名前端，使用NodeJs作为后端是一个很不错的选择，nodejs有包管理工具npm，可以很方便的下载到第三方依赖包，可以先用npm安装前端包管理工具bower，然后再用bower下载前端需要的依赖文件，还可以用npm安装grunt，使用ugly对代码进行压缩混淆，防止别人看到代码。\n\nNodeJs(express+mongodb)很适合开发web应用的后端，代码的语法跟JavaScript一样，是前端工程师的不二选择，附送传送门：\n\n[MongoDB帮助文档](https://docs.mongodb.org/manual/?_ga=1.197256426.478103933.1452413886)、\n[Express帮助文档](http://expressjs.com/en/4x/api.html)\n\n### 移动终端\n\n严格意义上，移动终端也可以归纳为前端技术，因为移动终端上的开发是客户端开发，都是通过与服务器端数据交互来显示页面。每一个移动终端上的运行的系统一定有个webview组件，提供用户的网页浏览功能。我们可以将webview放大到全屏，并且提供丰富的交互功能，这样是不是就是一个应用了？但是这样还不够，这仅仅实现了页面上的交互，还不能调用系统的组件，例如Android的Toast或iOS上的Core Location。在开发应用时，我们可以把一个原生代码编写成的对象封装成js对象传进webview中调用，这样就可以调用到了。\n\n这么常用的功能，肯定有先驱为我们铺好路滴，Cordova就是用来打破这个屏障的，原称为phonegap（手机代沟？），cordova可以很方便的调用到系统功能，还有很多做好的插件使用，比如扫描二维码等等。帮助文档：[http://cordova.apache.org/docs/en/5.4.0/](http://cordova.apache.org/docs/en/5.4.0/)\n\n移动终端上，Angular当然也有提供相应的模块，比如前面提到过的[ngCordova](http://ngmodules.org/modules/ng-cordova)。还有ionic框架，ionic是基于Angular专用于开发HybirdApp（混合型App）的移动框架，提供了大量的Angular指令集，可以十分方便的开发HybirdApp，帮助文档：[http://ionicframework.com/docs/](http://ionicframework.com/docs/)\n\n**转载请注明出处：[ZevenFang](http://zevenfang.github.io/)，O(∩_∩)O谢谢~**\n","source":"_posts/前端技术资源合集.md","raw":"---\ntitle: 前端技术资源合集\ndate: 2016-04-24 20:36:01\ndescription: \"HTML5的出现，赋予了前端更多重要的任务，不再停留在平面设计阶段了，更多关注在用户的交互性上和网站的响应速度上。主要是对网页页面视觉效果上的设计，具体通过运用html/css来对页面排版和配色，现在已经有很多成形的框架来帮助前端工程师搭建一个高大上的网站。\"\ncategories:\n- Front\ntags:\n- 前端\n---\n> 前端对于网站来说，通常是指，网站的前台部分包括网站的表现层和结构层。因此前端技术一般分为前端设计和前端开发，前端设计一般可以理解为网站的视觉设计，前端开发则是网站的前台代码实现，包括基本的HTML和CSS以及JavaScript/ajax，现在最新的高级版本HTML5、CSS3，以及SVG等。\n>>—— From Baidu Baike\n\nHTML5的出现，赋予了前端更多重要的任务，不再停留在平面设计阶段了，更多关注在用户的交互性上和网站的响应速度上。\n\n### 前端设计\n主要是对网页页面视觉效果上的设计，具体通过运用html/css来对页面排版和配色，现在已经有很多成形的框架来帮助前端工程师搭建一个高大上的网站：\n\nbootstrap：[http://getbootstrap.com/](http://getbootstrap.com/)\n\nfoundation：[http://foundation.zurb.com/](http://foundation.zurb.com/)\n\nSemanticUI: [http://semantic-ui.com/](http://semantic-ui.com/)\n\n以上框架都是响应式布局框架，能够对不同屏幕适配，对比以上三个框架，bootstrap比较简洁大方，更适合做pc网站，而foundation优先支持手机适配，并且可以自定化下载的功能模块，大大缩小框架的大小，对于跑流量的手机网站更为适合，Semantic UI的设计相当的语义化，容易理解也不用同时使用一大堆样式来显示一个div，最适合开发页面（个人认为…），而且对手机页面支持也做得很好。\n\n### 前端开发\n主要提供数据交互和提高用户的交互体验，甚至可以定义路由，主导页面的跳转（没有做前后端分离，页面一般由后端Controller跳转），熟练使用JavaScript语言相当重要。\n\n当然现在也有大量可靠的框架了，最常用框架有Extjs\n\nExtjs，用过一周，然后就果断抛弃了，Extjs可以用来做通用后台管理系统，用js即可定义一个表单，定义一个Form对象，然后定义表单字段，甚至一个xtype:'htmleditor'即可整合一个在线编辑器到表单中，但是样式也是在js中定义好的，基本上一成不变，很难改变样式，而且页面也是由多个iframe组成，对浏览器渲染很不友好，对话框和按钮也是一层一层嵌套进去，代码中间会产生一个很长的缩进。\n\nJQuery和Zepto.js放一起讲，因为Zepto 的 API 就是完全兼容 jQuery 的，功能上 Zepto 是 jQuery 的子集，定位上 jQuery 桌面为主，Zepto 则从一开始就定位移动设备，所以体积方面有一定优势。也就是说如果你只用了 jQuery 很少且都是核心的功能，比如选择器等，那么可以在不改动任何业务代码的情况下把 lib 切换到 Zepto——其实就是把 $ 对象换掉了。JQuery帮助文档：[http://api.jquery.com/](http://api.jquery.com/)\n\n[AngularJs](https://angularjs.org/)，MVVM双向数据绑定框架，目前由Google在维护的框架。Google出品必属精品（比如：安卓平台），AngularJs是一个十分强大的框架，思想十分前卫，为前后端分离做出巨大的贡献，集成了自身一套的模板引擎，通过{{ data }}就可以在页面上拿到js模板中$scope(作用域)绑定的数据(data)，可以定义过滤器，也有内置的过滤器，比如时间格式转换{timestamp|date:'YYYY-MM-DD'}，可以自定义指令等等……\n\n但是最强大的是Angular提供的模块化(Module)设计，因此[Angular社区](http://ngmodules.org/modules)上有很多强大的开源第三方模块：\n\n[ui-router](http://ngmodules.org/modules/ui-router)，尽管Angular自带了路由控制的一套机制，但是还是不够完善，ui-router是专门控制路由的模块，支持多层级路由无限的嵌套，帮助文档[传送门](http://angular-ui.github.io/ui-router/site/#/api/ui.router)。\n\n[ocLazyLoad](http://ngmodules.org/modules/ocLazyLoad)，可以配合ui-router按需加载文件到页面上，但是路由跳转后不会删除引入的文件，可以通过Dom操作来删除script或link节点，使用懒加载不会让所有文件一次性加载，页面也不会显得太过臃肿，帮助文档[传送门](https://oclazyload.readme.io/docs)。\n\n[ngCordova](http://ngmodules.org/modules/ng-cordova)，配合cordova开发可以开发出跨平台移动应用，Android/iOS/WinPhone，甚至黑莓OS……，打包成phonegap应用，简直方便到没人性，使用cordova最好对打包的平台有所了解，帮助文档[传送门](http://ngcordova.com/docs/plugins/)。\n\n### 后端技术\n\n一个不懂后端的前端不是好前端，半年前我只接触后端的开发，开发过J2EE(SpringMVC+Hibernate)/PHP(ThinkPHP)/Python(半吊子)，了解后端对前端开发十分重要，因为前后端分离后，前端只管ajax向后端要json数据，后端只需要提供相应的api就够了，所以了解后端如何从数据库查数据并且序列化成json数据相当重要。同时要了解HTTP 1.1的协议，了解请求头、请求体、响应头、响应体，方便从调试工具中查看提交的数据和返回的数据，方便对bug的定位。\n\n作为一名前端，使用NodeJs作为后端是一个很不错的选择，nodejs有包管理工具npm，可以很方便的下载到第三方依赖包，可以先用npm安装前端包管理工具bower，然后再用bower下载前端需要的依赖文件，还可以用npm安装grunt，使用ugly对代码进行压缩混淆，防止别人看到代码。\n\nNodeJs(express+mongodb)很适合开发web应用的后端，代码的语法跟JavaScript一样，是前端工程师的不二选择，附送传送门：\n\n[MongoDB帮助文档](https://docs.mongodb.org/manual/?_ga=1.197256426.478103933.1452413886)、\n[Express帮助文档](http://expressjs.com/en/4x/api.html)\n\n### 移动终端\n\n严格意义上，移动终端也可以归纳为前端技术，因为移动终端上的开发是客户端开发，都是通过与服务器端数据交互来显示页面。每一个移动终端上的运行的系统一定有个webview组件，提供用户的网页浏览功能。我们可以将webview放大到全屏，并且提供丰富的交互功能，这样是不是就是一个应用了？但是这样还不够，这仅仅实现了页面上的交互，还不能调用系统的组件，例如Android的Toast或iOS上的Core Location。在开发应用时，我们可以把一个原生代码编写成的对象封装成js对象传进webview中调用，这样就可以调用到了。\n\n这么常用的功能，肯定有先驱为我们铺好路滴，Cordova就是用来打破这个屏障的，原称为phonegap（手机代沟？），cordova可以很方便的调用到系统功能，还有很多做好的插件使用，比如扫描二维码等等。帮助文档：[http://cordova.apache.org/docs/en/5.4.0/](http://cordova.apache.org/docs/en/5.4.0/)\n\n移动终端上，Angular当然也有提供相应的模块，比如前面提到过的[ngCordova](http://ngmodules.org/modules/ng-cordova)。还有ionic框架，ionic是基于Angular专用于开发HybirdApp（混合型App）的移动框架，提供了大量的Angular指令集，可以十分方便的开发HybirdApp，帮助文档：[http://ionicframework.com/docs/](http://ionicframework.com/docs/)\n\n**转载请注明出处：[ZevenFang](http://zevenfang.github.io/)，O(∩_∩)O谢谢~**\n","slug":"前端技术资源合集","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi02000z3ghgjfdfjhmm","content":"<blockquote>\n<p>前端对于网站来说，通常是指，网站的前台部分包括网站的表现层和结构层。因此前端技术一般分为前端设计和前端开发，前端设计一般可以理解为网站的视觉设计，前端开发则是网站的前台代码实现，包括基本的HTML和CSS以及JavaScript/ajax，现在最新的高级版本HTML5、CSS3，以及SVG等。</p>\n<blockquote>\n<p>—— From Baidu Baike</p>\n</blockquote>\n</blockquote>\n<p>HTML5的出现，赋予了前端更多重要的任务，不再停留在平面设计阶段了，更多关注在用户的交互性上和网站的响应速度上。</p>\n<h3 id=\"前端设计\"><a href=\"#前端设计\" class=\"headerlink\" title=\"前端设计\"></a>前端设计</h3><p>主要是对网页页面视觉效果上的设计，具体通过运用html/css来对页面排版和配色，现在已经有很多成形的框架来帮助前端工程师搭建一个高大上的网站：</p>\n<p>bootstrap：<a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">http://getbootstrap.com/</a></p>\n<p>foundation：<a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"external\">http://foundation.zurb.com/</a></p>\n<p>SemanticUI: <a href=\"http://semantic-ui.com/\" target=\"_blank\" rel=\"external\">http://semantic-ui.com/</a></p>\n<p>以上框架都是响应式布局框架，能够对不同屏幕适配，对比以上三个框架，bootstrap比较简洁大方，更适合做pc网站，而foundation优先支持手机适配，并且可以自定化下载的功能模块，大大缩小框架的大小，对于跑流量的手机网站更为适合，Semantic UI的设计相当的语义化，容易理解也不用同时使用一大堆样式来显示一个div，最适合开发页面（个人认为…），而且对手机页面支持也做得很好。</p>\n<h3 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h3><p>主要提供数据交互和提高用户的交互体验，甚至可以定义路由，主导页面的跳转（没有做前后端分离，页面一般由后端Controller跳转），熟练使用JavaScript语言相当重要。</p>\n<p>当然现在也有大量可靠的框架了，最常用框架有Extjs</p>\n<p>Extjs，用过一周，然后就果断抛弃了，Extjs可以用来做通用后台管理系统，用js即可定义一个表单，定义一个Form对象，然后定义表单字段，甚至一个xtype:’htmleditor’即可整合一个在线编辑器到表单中，但是样式也是在js中定义好的，基本上一成不变，很难改变样式，而且页面也是由多个iframe组成，对浏览器渲染很不友好，对话框和按钮也是一层一层嵌套进去，代码中间会产生一个很长的缩进。</p>\n<p>JQuery和Zepto.js放一起讲，因为Zepto 的 API 就是完全兼容 jQuery 的，功能上 Zepto 是 jQuery 的子集，定位上 jQuery 桌面为主，Zepto 则从一开始就定位移动设备，所以体积方面有一定优势。也就是说如果你只用了 jQuery 很少且都是核心的功能，比如选择器等，那么可以在不改动任何业务代码的情况下把 lib 切换到 Zepto——其实就是把 $ 对象换掉了。JQuery帮助文档：<a href=\"http://api.jquery.com/\" target=\"_blank\" rel=\"external\">http://api.jquery.com/</a></p>\n<p><a href=\"https://angularjs.org/\" target=\"_blank\" rel=\"external\">AngularJs</a>，MVVM双向数据绑定框架，目前由Google在维护的框架。Google出品必属精品（比如：安卓平台），AngularJs是一个十分强大的框架，思想十分前卫，为前后端分离做出巨大的贡献，集成了自身一套的模板引擎，通过就可以在页面上拿到js模板中$scope(作用域)绑定的数据(data)，可以定义过滤器，也有内置的过滤器，比如时间格式转换{timestamp|date:’YYYY-MM-DD’}，可以自定义指令等等……</p>\n<p>但是最强大的是Angular提供的模块化(Module)设计，因此<a href=\"http://ngmodules.org/modules\" target=\"_blank\" rel=\"external\">Angular社区</a>上有很多强大的开源第三方模块：</p>\n<p><a href=\"http://ngmodules.org/modules/ui-router\" target=\"_blank\" rel=\"external\">ui-router</a>，尽管Angular自带了路由控制的一套机制，但是还是不够完善，ui-router是专门控制路由的模块，支持多层级路由无限的嵌套，帮助文档<a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router\" target=\"_blank\" rel=\"external\">传送门</a>。</p>\n<p><a href=\"http://ngmodules.org/modules/ocLazyLoad\" target=\"_blank\" rel=\"external\">ocLazyLoad</a>，可以配合ui-router按需加载文件到页面上，但是路由跳转后不会删除引入的文件，可以通过Dom操作来删除script或link节点，使用懒加载不会让所有文件一次性加载，页面也不会显得太过臃肿，帮助文档<a href=\"https://oclazyload.readme.io/docs\" target=\"_blank\" rel=\"external\">传送门</a>。</p>\n<p><a href=\"http://ngmodules.org/modules/ng-cordova\" target=\"_blank\" rel=\"external\">ngCordova</a>，配合cordova开发可以开发出跨平台移动应用，Android/iOS/WinPhone，甚至黑莓OS……，打包成phonegap应用，简直方便到没人性，使用cordova最好对打包的平台有所了解，帮助文档<a href=\"http://ngcordova.com/docs/plugins/\" target=\"_blank\" rel=\"external\">传送门</a>。</p>\n<h3 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h3><p>一个不懂后端的前端不是好前端，半年前我只接触后端的开发，开发过J2EE(SpringMVC+Hibernate)/PHP(ThinkPHP)/Python(半吊子)，了解后端对前端开发十分重要，因为前后端分离后，前端只管ajax向后端要json数据，后端只需要提供相应的api就够了，所以了解后端如何从数据库查数据并且序列化成json数据相当重要。同时要了解HTTP 1.1的协议，了解请求头、请求体、响应头、响应体，方便从调试工具中查看提交的数据和返回的数据，方便对bug的定位。</p>\n<p>作为一名前端，使用NodeJs作为后端是一个很不错的选择，nodejs有包管理工具npm，可以很方便的下载到第三方依赖包，可以先用npm安装前端包管理工具bower，然后再用bower下载前端需要的依赖文件，还可以用npm安装grunt，使用ugly对代码进行压缩混淆，防止别人看到代码。</p>\n<p>NodeJs(express+mongodb)很适合开发web应用的后端，代码的语法跟JavaScript一样，是前端工程师的不二选择，附送传送门：</p>\n<p><a href=\"https://docs.mongodb.org/manual/?_ga=1.197256426.478103933.1452413886\" target=\"_blank\" rel=\"external\">MongoDB帮助文档</a>、<br><a href=\"http://expressjs.com/en/4x/api.html\" target=\"_blank\" rel=\"external\">Express帮助文档</a></p>\n<h3 id=\"移动终端\"><a href=\"#移动终端\" class=\"headerlink\" title=\"移动终端\"></a>移动终端</h3><p>严格意义上，移动终端也可以归纳为前端技术，因为移动终端上的开发是客户端开发，都是通过与服务器端数据交互来显示页面。每一个移动终端上的运行的系统一定有个webview组件，提供用户的网页浏览功能。我们可以将webview放大到全屏，并且提供丰富的交互功能，这样是不是就是一个应用了？但是这样还不够，这仅仅实现了页面上的交互，还不能调用系统的组件，例如Android的Toast或iOS上的Core Location。在开发应用时，我们可以把一个原生代码编写成的对象封装成js对象传进webview中调用，这样就可以调用到了。</p>\n<p>这么常用的功能，肯定有先驱为我们铺好路滴，Cordova就是用来打破这个屏障的，原称为phonegap（手机代沟？），cordova可以很方便的调用到系统功能，还有很多做好的插件使用，比如扫描二维码等等。帮助文档：<a href=\"http://cordova.apache.org/docs/en/5.4.0/\" target=\"_blank\" rel=\"external\">http://cordova.apache.org/docs/en/5.4.0/</a></p>\n<p>移动终端上，Angular当然也有提供相应的模块，比如前面提到过的<a href=\"http://ngmodules.org/modules/ng-cordova\" target=\"_blank\" rel=\"external\">ngCordova</a>。还有ionic框架，ionic是基于Angular专用于开发HybirdApp（混合型App）的移动框架，提供了大量的Angular指令集，可以十分方便的开发HybirdApp，帮助文档：<a href=\"http://ionicframework.com/docs/\" target=\"_blank\" rel=\"external\">http://ionicframework.com/docs/</a></p>\n<p><strong>转载请注明出处：<a href=\"http://zevenfang.github.io/\" target=\"_blank\" rel=\"external\">ZevenFang</a>，O(∩_∩)O谢谢~</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>前端对于网站来说，通常是指，网站的前台部分包括网站的表现层和结构层。因此前端技术一般分为前端设计和前端开发，前端设计一般可以理解为网站的视觉设计，前端开发则是网站的前台代码实现，包括基本的HTML和CSS以及JavaScript/ajax，现在最新的高级版本HTML5、CSS3，以及SVG等。</p>\n<blockquote>\n<p>—— From Baidu Baike</p>\n</blockquote>\n</blockquote>\n<p>HTML5的出现，赋予了前端更多重要的任务，不再停留在平面设计阶段了，更多关注在用户的交互性上和网站的响应速度上。</p>\n<h3 id=\"前端设计\"><a href=\"#前端设计\" class=\"headerlink\" title=\"前端设计\"></a>前端设计</h3><p>主要是对网页页面视觉效果上的设计，具体通过运用html/css来对页面排版和配色，现在已经有很多成形的框架来帮助前端工程师搭建一个高大上的网站：</p>\n<p>bootstrap：<a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">http://getbootstrap.com/</a></p>\n<p>foundation：<a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"external\">http://foundation.zurb.com/</a></p>\n<p>SemanticUI: <a href=\"http://semantic-ui.com/\" target=\"_blank\" rel=\"external\">http://semantic-ui.com/</a></p>\n<p>以上框架都是响应式布局框架，能够对不同屏幕适配，对比以上三个框架，bootstrap比较简洁大方，更适合做pc网站，而foundation优先支持手机适配，并且可以自定化下载的功能模块，大大缩小框架的大小，对于跑流量的手机网站更为适合，Semantic UI的设计相当的语义化，容易理解也不用同时使用一大堆样式来显示一个div，最适合开发页面（个人认为…），而且对手机页面支持也做得很好。</p>\n<h3 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h3><p>主要提供数据交互和提高用户的交互体验，甚至可以定义路由，主导页面的跳转（没有做前后端分离，页面一般由后端Controller跳转），熟练使用JavaScript语言相当重要。</p>\n<p>当然现在也有大量可靠的框架了，最常用框架有Extjs</p>\n<p>Extjs，用过一周，然后就果断抛弃了，Extjs可以用来做通用后台管理系统，用js即可定义一个表单，定义一个Form对象，然后定义表单字段，甚至一个xtype:’htmleditor’即可整合一个在线编辑器到表单中，但是样式也是在js中定义好的，基本上一成不变，很难改变样式，而且页面也是由多个iframe组成，对浏览器渲染很不友好，对话框和按钮也是一层一层嵌套进去，代码中间会产生一个很长的缩进。</p>\n<p>JQuery和Zepto.js放一起讲，因为Zepto 的 API 就是完全兼容 jQuery 的，功能上 Zepto 是 jQuery 的子集，定位上 jQuery 桌面为主，Zepto 则从一开始就定位移动设备，所以体积方面有一定优势。也就是说如果你只用了 jQuery 很少且都是核心的功能，比如选择器等，那么可以在不改动任何业务代码的情况下把 lib 切换到 Zepto——其实就是把 $ 对象换掉了。JQuery帮助文档：<a href=\"http://api.jquery.com/\" target=\"_blank\" rel=\"external\">http://api.jquery.com/</a></p>\n<p><a href=\"https://angularjs.org/\" target=\"_blank\" rel=\"external\">AngularJs</a>，MVVM双向数据绑定框架，目前由Google在维护的框架。Google出品必属精品（比如：安卓平台），AngularJs是一个十分强大的框架，思想十分前卫，为前后端分离做出巨大的贡献，集成了自身一套的模板引擎，通过就可以在页面上拿到js模板中$scope(作用域)绑定的数据(data)，可以定义过滤器，也有内置的过滤器，比如时间格式转换{timestamp|date:’YYYY-MM-DD’}，可以自定义指令等等……</p>\n<p>但是最强大的是Angular提供的模块化(Module)设计，因此<a href=\"http://ngmodules.org/modules\" target=\"_blank\" rel=\"external\">Angular社区</a>上有很多强大的开源第三方模块：</p>\n<p><a href=\"http://ngmodules.org/modules/ui-router\" target=\"_blank\" rel=\"external\">ui-router</a>，尽管Angular自带了路由控制的一套机制，但是还是不够完善，ui-router是专门控制路由的模块，支持多层级路由无限的嵌套，帮助文档<a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router\" target=\"_blank\" rel=\"external\">传送门</a>。</p>\n<p><a href=\"http://ngmodules.org/modules/ocLazyLoad\" target=\"_blank\" rel=\"external\">ocLazyLoad</a>，可以配合ui-router按需加载文件到页面上，但是路由跳转后不会删除引入的文件，可以通过Dom操作来删除script或link节点，使用懒加载不会让所有文件一次性加载，页面也不会显得太过臃肿，帮助文档<a href=\"https://oclazyload.readme.io/docs\" target=\"_blank\" rel=\"external\">传送门</a>。</p>\n<p><a href=\"http://ngmodules.org/modules/ng-cordova\" target=\"_blank\" rel=\"external\">ngCordova</a>，配合cordova开发可以开发出跨平台移动应用，Android/iOS/WinPhone，甚至黑莓OS……，打包成phonegap应用，简直方便到没人性，使用cordova最好对打包的平台有所了解，帮助文档<a href=\"http://ngcordova.com/docs/plugins/\" target=\"_blank\" rel=\"external\">传送门</a>。</p>\n<h3 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h3><p>一个不懂后端的前端不是好前端，半年前我只接触后端的开发，开发过J2EE(SpringMVC+Hibernate)/PHP(ThinkPHP)/Python(半吊子)，了解后端对前端开发十分重要，因为前后端分离后，前端只管ajax向后端要json数据，后端只需要提供相应的api就够了，所以了解后端如何从数据库查数据并且序列化成json数据相当重要。同时要了解HTTP 1.1的协议，了解请求头、请求体、响应头、响应体，方便从调试工具中查看提交的数据和返回的数据，方便对bug的定位。</p>\n<p>作为一名前端，使用NodeJs作为后端是一个很不错的选择，nodejs有包管理工具npm，可以很方便的下载到第三方依赖包，可以先用npm安装前端包管理工具bower，然后再用bower下载前端需要的依赖文件，还可以用npm安装grunt，使用ugly对代码进行压缩混淆，防止别人看到代码。</p>\n<p>NodeJs(express+mongodb)很适合开发web应用的后端，代码的语法跟JavaScript一样，是前端工程师的不二选择，附送传送门：</p>\n<p><a href=\"https://docs.mongodb.org/manual/?_ga=1.197256426.478103933.1452413886\" target=\"_blank\" rel=\"external\">MongoDB帮助文档</a>、<br><a href=\"http://expressjs.com/en/4x/api.html\" target=\"_blank\" rel=\"external\">Express帮助文档</a></p>\n<h3 id=\"移动终端\"><a href=\"#移动终端\" class=\"headerlink\" title=\"移动终端\"></a>移动终端</h3><p>严格意义上，移动终端也可以归纳为前端技术，因为移动终端上的开发是客户端开发，都是通过与服务器端数据交互来显示页面。每一个移动终端上的运行的系统一定有个webview组件，提供用户的网页浏览功能。我们可以将webview放大到全屏，并且提供丰富的交互功能，这样是不是就是一个应用了？但是这样还不够，这仅仅实现了页面上的交互，还不能调用系统的组件，例如Android的Toast或iOS上的Core Location。在开发应用时，我们可以把一个原生代码编写成的对象封装成js对象传进webview中调用，这样就可以调用到了。</p>\n<p>这么常用的功能，肯定有先驱为我们铺好路滴，Cordova就是用来打破这个屏障的，原称为phonegap（手机代沟？），cordova可以很方便的调用到系统功能，还有很多做好的插件使用，比如扫描二维码等等。帮助文档：<a href=\"http://cordova.apache.org/docs/en/5.4.0/\" target=\"_blank\" rel=\"external\">http://cordova.apache.org/docs/en/5.4.0/</a></p>\n<p>移动终端上，Angular当然也有提供相应的模块，比如前面提到过的<a href=\"http://ngmodules.org/modules/ng-cordova\" target=\"_blank\" rel=\"external\">ngCordova</a>。还有ionic框架，ionic是基于Angular专用于开发HybirdApp（混合型App）的移动框架，提供了大量的Angular指令集，可以十分方便的开发HybirdApp，帮助文档：<a href=\"http://ionicframework.com/docs/\" target=\"_blank\" rel=\"external\">http://ionicframework.com/docs/</a></p>\n<p><strong>转载请注明出处：<a href=\"http://zevenfang.github.io/\" target=\"_blank\" rel=\"external\">ZevenFang</a>，O(∩_∩)O谢谢~</strong></p>\n"},{"title":"使用 XMLHttpRequest 发送 Ajax","date":"2017-05-04T02:30:30.000Z","description":"XMLHttpRequest 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。","_content":"> XMLHttpRequest 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。 ——from [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)\n\n简单的例子：\n```html\n<span id=\"ajaxButton\" style=\"cursor: pointer; text-decoration: underline\">\n  Make a request\n</span>\n<script type=\"text/javascript\">\n(function() {\n  var httpRequest;\n  document.getElementById(\"ajaxButton\").onclick = function() { makeRequest('test.html'); };\n\n  function makeRequest(url) {\n    httpRequest = new XMLHttpRequest();\n\n    if (!httpRequest) {\n      alert('Giving up :( Cannot create an XMLHTTP instance');\n      return false;\n    }\n    httpRequest.onreadystatechange = alertContents;\n    httpRequest.open('GET', url);\n    httpRequest.send();\n  }\n\n  function alertContents() {\n    if (httpRequest.readyState === XMLHttpRequest.DONE) {\n      if (httpRequest.status === 200) {\n        alert(httpRequest.responseText);\n      } else {\n        alert('There was a problem with the request.');\n      }\n    }\n  }\n})();\n</script>\n```\n\n简易版本：\n```js\nfunction ajax(url, type, success, error) {\n    var http = new XMLHttpRequest();\n    http.onreadystatechange = function () {\n        if (http.readyState === XMLHttpRequest.DONE) {\n            if (http.status === 200) success && success(http.responseText);\n            else error && error();\n        }\n    };\n    http.open(type, url);\n    http.send();\n}\n```","source":"_posts/使用-XMLHttpRequest-发送-Ajax.md","raw":"---\ntitle: 使用 XMLHttpRequest 发送 Ajax\ndate: 2017-05-04 10:30:30\ndescription: XMLHttpRequest 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。\ntags:\n- 前端\ncategories:\n- Front\n---\n> XMLHttpRequest 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。 ——from [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)\n\n简单的例子：\n```html\n<span id=\"ajaxButton\" style=\"cursor: pointer; text-decoration: underline\">\n  Make a request\n</span>\n<script type=\"text/javascript\">\n(function() {\n  var httpRequest;\n  document.getElementById(\"ajaxButton\").onclick = function() { makeRequest('test.html'); };\n\n  function makeRequest(url) {\n    httpRequest = new XMLHttpRequest();\n\n    if (!httpRequest) {\n      alert('Giving up :( Cannot create an XMLHTTP instance');\n      return false;\n    }\n    httpRequest.onreadystatechange = alertContents;\n    httpRequest.open('GET', url);\n    httpRequest.send();\n  }\n\n  function alertContents() {\n    if (httpRequest.readyState === XMLHttpRequest.DONE) {\n      if (httpRequest.status === 200) {\n        alert(httpRequest.responseText);\n      } else {\n        alert('There was a problem with the request.');\n      }\n    }\n  }\n})();\n</script>\n```\n\n简易版本：\n```js\nfunction ajax(url, type, success, error) {\n    var http = new XMLHttpRequest();\n    http.onreadystatechange = function () {\n        if (http.readyState === XMLHttpRequest.DONE) {\n            if (http.status === 200) success && success(http.responseText);\n            else error && error();\n        }\n    };\n    http.open(type, url);\n    http.send();\n}\n```","slug":"使用-XMLHttpRequest-发送-Ajax","published":1,"updated":"2017-05-13T13:54:13.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0300123ghgv2sfww5r","content":"<blockquote>\n<p>XMLHttpRequest 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。 ——from <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">MDN</a></p>\n</blockquote>\n<p>简单的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ajaxButton\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor: pointer; text-decoration: underline\"</span>&gt;</span></div><div class=\"line\">  Make a request</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> httpRequest;</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ajaxButton\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; makeRequest(<span class=\"string\">'test.html'</span>); &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeRequest</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    httpRequest = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!httpRequest) &#123;</div><div class=\"line\">      alert(<span class=\"string\">'Giving up :( Cannot create an XMLHTTP instance'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    httpRequest.onreadystatechange = alertContents;</div><div class=\"line\">    httpRequest.open(<span class=\"string\">'GET'</span>, url);</div><div class=\"line\">    httpRequest.send();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertContents</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (httpRequest.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        alert(httpRequest.responseText);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alert(<span class=\"string\">'There was a problem with the request.'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>简易版本：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url, type, success, error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    http.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (http.readyState === XMLHttpRequest.DONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (http.status === <span class=\"number\">200</span>) success &amp;&amp; success(http.responseText);</div><div class=\"line\">            <span class=\"keyword\">else</span> error &amp;&amp; error();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    http.open(type, url);</div><div class=\"line\">    http.send();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>XMLHttpRequest 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。 ——from <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">MDN</a></p>\n</blockquote>\n<p>简单的例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ajaxButton\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"cursor: pointer; text-decoration: underline\"</span>&gt;</span></div><div class=\"line\">  Make a request</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> httpRequest;</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ajaxButton\"</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; makeRequest(<span class=\"string\">'test.html'</span>); &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeRequest</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    httpRequest = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!httpRequest) &#123;</div><div class=\"line\">      alert(<span class=\"string\">'Giving up :( Cannot create an XMLHTTP instance'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    httpRequest.onreadystatechange = alertContents;</div><div class=\"line\">    httpRequest.open(<span class=\"string\">'GET'</span>, url);</div><div class=\"line\">    httpRequest.send();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertContents</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (httpRequest.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        alert(httpRequest.responseText);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alert(<span class=\"string\">'There was a problem with the request.'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>简易版本：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url, type, success, error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> http = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    http.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (http.readyState === XMLHttpRequest.DONE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (http.status === <span class=\"number\">200</span>) success &amp;&amp; success(http.responseText);</div><div class=\"line\">            <span class=\"keyword\">else</span> error &amp;&amp; error();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    http.open(type, url);</div><div class=\"line\">    http.send();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"使用 FormData 上传文件","date":"2017-05-13T13:49:37.000Z","description":"利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。","_content":"> XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。 ——from [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)\n\n简单的例子：\n```js\nfunction UploadFile() {\n    var fileObj = document.getElementById(\"file\").files[0]; // 获取文件对象\n    var FileController = \"../file/save\";                    // 接收上传文件的后台地址 \n    // FormData 对象\n    var form = new FormData();\n    form.append(\"author\", \"hooyes\");                        // 可以增加表单数据\n    form.append(\"file\", fileObj);                           // 文件对象\n    // XMLHttpRequest 对象\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"post\", FileController, true);\n    xhr.onload = function () {\n        alert(\"上传完成!\");\n    };\n    xhr.send(form);\n}\n```","source":"_posts/使用-FormData-上传文件.md","raw":"---\ntitle: 使用 FormData 上传文件\ndate: 2017-05-13 21:49:37\ndescription: 利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。\ntags:\n- 前端\ncategories:\n- Front\n---\n> XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。 ——from [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)\n\n简单的例子：\n```js\nfunction UploadFile() {\n    var fileObj = document.getElementById(\"file\").files[0]; // 获取文件对象\n    var FileController = \"../file/save\";                    // 接收上传文件的后台地址 \n    // FormData 对象\n    var form = new FormData();\n    form.append(\"author\", \"hooyes\");                        // 可以增加表单数据\n    form.append(\"file\", fileObj);                           // 文件对象\n    // XMLHttpRequest 对象\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"post\", FileController, true);\n    xhr.onload = function () {\n        alert(\"上传完成!\");\n    };\n    xhr.send(form);\n}\n```","slug":"使用-FormData-上传文件","published":1,"updated":"2017-05-13T16:04:19.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0500143ghg16gcjv66","content":"<blockquote>\n<p>XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个”表单”.比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。 ——from <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\" target=\"_blank\" rel=\"external\">MDN</a></p>\n</blockquote>\n<p>简单的例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UploadFile</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fileObj = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"file\"</span>).files[<span class=\"number\">0</span>]; <span class=\"comment\">// 获取文件对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> FileController = <span class=\"string\">\"../file/save\"</span>;                    <span class=\"comment\">// 接收上传文件的后台地址 </span></div><div class=\"line\">    <span class=\"comment\">// FormData 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">    form.append(<span class=\"string\">\"author\"</span>, <span class=\"string\">\"hooyes\"</span>);                        <span class=\"comment\">// 可以增加表单数据</span></div><div class=\"line\">    form.append(<span class=\"string\">\"file\"</span>, fileObj);                           <span class=\"comment\">// 文件对象</span></div><div class=\"line\">    <span class=\"comment\">// XMLHttpRequest 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    xhr.open(<span class=\"string\">\"post\"</span>, FileController, <span class=\"literal\">true</span>);</div><div class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"上传完成!\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    xhr.send(form);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个”表单”.比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个二进制文件。 ——from <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\" target=\"_blank\" rel=\"external\">MDN</a></p>\n</blockquote>\n<p>简单的例子：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UploadFile</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fileObj = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"file\"</span>).files[<span class=\"number\">0</span>]; <span class=\"comment\">// 获取文件对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> FileController = <span class=\"string\">\"../file/save\"</span>;                    <span class=\"comment\">// 接收上传文件的后台地址 </span></div><div class=\"line\">    <span class=\"comment\">// FormData 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">    form.append(<span class=\"string\">\"author\"</span>, <span class=\"string\">\"hooyes\"</span>);                        <span class=\"comment\">// 可以增加表单数据</span></div><div class=\"line\">    form.append(<span class=\"string\">\"file\"</span>, fileObj);                           <span class=\"comment\">// 文件对象</span></div><div class=\"line\">    <span class=\"comment\">// XMLHttpRequest 对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    xhr.open(<span class=\"string\">\"post\"</span>, FileController, <span class=\"literal\">true</span>);</div><div class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"上传完成!\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    xhr.send(form);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"简易搭建mongodb","date":"2016-04-25T16:12:29.000Z","description":"mkdir mongodb 创建一个文件夹，cd mongodb 进入目录，mkdir data 创建存放数据的目录，mkdir log 创建日志文件的目录，mkdir conf 存放启动配置文件，mkdir bin 存放mongodb的二进制文件","_content":"1.\tmkdir mongodb 创建一个文件夹\n2.\tcd mongodb 进入目录\n3.\tmkdir data 创建存放数据的目录\n4.\tmkdir log 创建日志文件的目录\n5.\tmkdir conf 存放启动配置文件\n6.\tmkdir bin 存放mongodb的二进制文件\n7.\tcp mongo-r2.6.5/mongod mongodb/bin 将源二进制文件拷贝进bin目录\n8.\tvim conf/mongod.conf 编辑配置文件，写入以下配置：\n```php\nport = 12345\ndbpath = data\nlogpath = log/mongod.log\nfork = true\n#fork在Linux下表明启动一个后台进程，在windows下则无效\n```\n9.\t直接启动mongodb进程\n```\nbin/mongod –f conf/mongod.conf\n```\n10.\t安全启动mongodb进程\n```php\nsudo cp mongo-r2.6.5/mongo /bin #将mongo客户端拷贝到/bin目录下\n/bin/mongo 127.0.0.1:12345/test #连接并在本机创建一个test数据库\nnumactl --interleave=all bin/mongod –f conf/mongod.conf\n```\n11.\t安装numactl\n```php\nsudo apt-get install numactl\n#使用numactl安全启用mongodb服务，这样启动mongodb服务就不会出现警告。\n```\n13.\t关闭mongodb服务, 使用killall mongod或者在client的shell里，use admin，执行db.shutdownServer()即可！\n","source":"_posts/简易搭建mongodb.md","raw":"---\ntitle: 简易搭建mongodb\ndate: 2016-04-26 00:12:29\ndescription: \"mkdir mongodb 创建一个文件夹，cd mongodb 进入目录，mkdir data 创建存放数据的目录，mkdir log 创建日志文件的目录，mkdir conf 存放启动配置文件，mkdir bin 存放mongodb的二进制文件\"\ntags:\n- mongodb\ncategories:\n- Database\n---\n1.\tmkdir mongodb 创建一个文件夹\n2.\tcd mongodb 进入目录\n3.\tmkdir data 创建存放数据的目录\n4.\tmkdir log 创建日志文件的目录\n5.\tmkdir conf 存放启动配置文件\n6.\tmkdir bin 存放mongodb的二进制文件\n7.\tcp mongo-r2.6.5/mongod mongodb/bin 将源二进制文件拷贝进bin目录\n8.\tvim conf/mongod.conf 编辑配置文件，写入以下配置：\n```php\nport = 12345\ndbpath = data\nlogpath = log/mongod.log\nfork = true\n#fork在Linux下表明启动一个后台进程，在windows下则无效\n```\n9.\t直接启动mongodb进程\n```\nbin/mongod –f conf/mongod.conf\n```\n10.\t安全启动mongodb进程\n```php\nsudo cp mongo-r2.6.5/mongo /bin #将mongo客户端拷贝到/bin目录下\n/bin/mongo 127.0.0.1:12345/test #连接并在本机创建一个test数据库\nnumactl --interleave=all bin/mongod –f conf/mongod.conf\n```\n11.\t安装numactl\n```php\nsudo apt-get install numactl\n#使用numactl安全启用mongodb服务，这样启动mongodb服务就不会出现警告。\n```\n13.\t关闭mongodb服务, 使用killall mongod或者在client的shell里，use admin，执行db.shutdownServer()即可！\n","slug":"简易搭建mongodb","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0800193ghgpwby3bba","content":"<ol>\n<li>mkdir mongodb 创建一个文件夹</li>\n<li>cd mongodb 进入目录</li>\n<li>mkdir data 创建存放数据的目录</li>\n<li>mkdir log 创建日志文件的目录</li>\n<li>mkdir conf 存放启动配置文件</li>\n<li>mkdir bin 存放mongodb的二进制文件</li>\n<li>cp mongo-r2.6.5/mongod mongodb/bin 将源二进制文件拷贝进bin目录</li>\n<li><p>vim conf/mongod.conf 编辑配置文件，写入以下配置：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">port = <span class=\"number\">12345</span></div><div class=\"line\">dbpath = data</div><div class=\"line\">logpath = log/mongod.log</div><div class=\"line\">fork = <span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"comment\">#fork在Linux下表明启动一个后台进程，在windows下则无效</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>直接启动mongodb进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/mongod –f conf/mongod.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>安全启动mongodb进程</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cp mongo-r2<span class=\"number\">.6</span><span class=\"number\">.5</span>/mongo /bin <span class=\"comment\">#将mongo客户端拷贝到/bin目录下</span></div><div class=\"line\">/bin/mongo <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">12345</span>/test <span class=\"comment\">#连接并在本机创建一个test数据库</span></div><div class=\"line\">numactl --interleave=all bin/mongod –f conf/mongod.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装numactl</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install numactl</div><div class=\"line\"><span class=\"comment\">#使用numactl安全启用mongodb服务，这样启动mongodb服务就不会出现警告。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>关闭mongodb服务, 使用killall mongod或者在client的shell里，use admin，执行db.shutdownServer()即可！</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>mkdir mongodb 创建一个文件夹</li>\n<li>cd mongodb 进入目录</li>\n<li>mkdir data 创建存放数据的目录</li>\n<li>mkdir log 创建日志文件的目录</li>\n<li>mkdir conf 存放启动配置文件</li>\n<li>mkdir bin 存放mongodb的二进制文件</li>\n<li>cp mongo-r2.6.5/mongod mongodb/bin 将源二进制文件拷贝进bin目录</li>\n<li><p>vim conf/mongod.conf 编辑配置文件，写入以下配置：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">port = <span class=\"number\">12345</span></div><div class=\"line\">dbpath = data</div><div class=\"line\">logpath = log/mongod.log</div><div class=\"line\">fork = <span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"comment\">#fork在Linux下表明启动一个后台进程，在windows下则无效</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>直接启动mongodb进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/mongod –f conf/mongod.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>安全启动mongodb进程</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cp mongo-r2<span class=\"number\">.6</span><span class=\"number\">.5</span>/mongo /bin <span class=\"comment\">#将mongo客户端拷贝到/bin目录下</span></div><div class=\"line\">/bin/mongo <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">12345</span>/test <span class=\"comment\">#连接并在本机创建一个test数据库</span></div><div class=\"line\">numactl --interleave=all bin/mongod –f conf/mongod.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装numactl</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install numactl</div><div class=\"line\"><span class=\"comment\">#使用numactl安全启用mongodb服务，这样启动mongodb服务就不会出现警告。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>关闭mongodb服务, 使用killall mongod或者在client的shell里，use admin，执行db.shutdownServer()即可！</p>\n</li>\n</ol>\n"},{"title":"更新Github fork后的项目代码","date":"2017-03-17T03:52:41.000Z","description":"三步走：配置远程的upstream 地址，对upstream的代码更新，进行代码合并。","_content":"### 1. 配置远程的upstream 地址\n```shell\ngit remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git\n```\n### 2. 对upstream的代码更新\n```shell\ngit fetch upstream\n```\n### 3. 进行代码合并\n```shell\ngit merge upstream/master\n```\n","source":"_posts/更新Github-fork后的项目代码.md","raw":"---\ntitle: 更新Github fork后的项目代码\ndate: 2017-03-17 11:52:41\ndescription: \"三步走：配置远程的upstream 地址，对upstream的代码更新，进行代码合并。\"\ntags:\n- Githhub\n---\n### 1. 配置远程的upstream 地址\n```shell\ngit remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git\n```\n### 2. 对upstream的代码更新\n```shell\ngit fetch upstream\n```\n### 3. 进行代码合并\n```shell\ngit merge upstream/master\n```\n","slug":"更新Github-fork后的项目代码","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0a001c3ghg5mtwitsp","content":"<h3 id=\"1-配置远程的upstream-地址\"><a href=\"#1-配置远程的upstream-地址\" class=\"headerlink\" title=\"1. 配置远程的upstream 地址\"></a>1. 配置远程的upstream 地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</div></pre></td></tr></table></figure>\n<h3 id=\"2-对upstream的代码更新\"><a href=\"#2-对upstream的代码更新\" class=\"headerlink\" title=\"2. 对upstream的代码更新\"></a>2. 对upstream的代码更新</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch upstream</div></pre></td></tr></table></figure>\n<h3 id=\"3-进行代码合并\"><a href=\"#3-进行代码合并\" class=\"headerlink\" title=\"3. 进行代码合并\"></a>3. 进行代码合并</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge upstream/master</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-配置远程的upstream-地址\"><a href=\"#1-配置远程的upstream-地址\" class=\"headerlink\" title=\"1. 配置远程的upstream 地址\"></a>1. 配置远程的upstream 地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</div></pre></td></tr></table></figure>\n<h3 id=\"2-对upstream的代码更新\"><a href=\"#2-对upstream的代码更新\" class=\"headerlink\" title=\"2. 对upstream的代码更新\"></a>2. 对upstream的代码更新</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch upstream</div></pre></td></tr></table></figure>\n<h3 id=\"3-进行代码合并\"><a href=\"#3-进行代码合并\" class=\"headerlink\" title=\"3. 进行代码合并\"></a>3. 进行代码合并</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge upstream/master</div></pre></td></tr></table></figure>\n"},{"title":"连接Redux调试服务器","date":"2016-08-21T02:10:21.000Z","description":"检查设备是否成功连接，运行adb devices；检查5678端口是否被占用；运行adb reverse tcp:5678 tcp:5678；摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单","_content":"\n1. 检查设备是否成功连接，运行adb devices\n2. 检查5678端口是否被占用\n3. 运行adb reverse tcp:5678 tcp:5678\n4. 摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单\n5. 点击Debug JS Remote即可连接Redux调试服务器\n","source":"_posts/连接Redux调试服务器.md","raw":"---\ntitle: 连接Redux调试服务器\ndate: 2016-08-21 10:10:21\ndescription: 检查设备是否成功连接，运行adb devices；检查5678端口是否被占用；运行adb reverse tcp:5678 tcp:5678；摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单\ntags:\n  - React\n  - ReactNative\ncategories:\n  - Front\n---\n\n1. 检查设备是否成功连接，运行adb devices\n2. 检查5678端口是否被占用\n3. 运行adb reverse tcp:5678 tcp:5678\n4. 摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单\n5. 点击Debug JS Remote即可连接Redux调试服务器\n","slug":"连接Redux调试服务器","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0c001f3ghglb8tu3hh","content":"<ol>\n<li>检查设备是否成功连接，运行adb devices</li>\n<li>检查5678端口是否被占用</li>\n<li>运行adb reverse tcp:5678 tcp:5678</li>\n<li>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单</li>\n<li>点击Debug JS Remote即可连接Redux调试服务器</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>检查设备是否成功连接，运行adb devices</li>\n<li>检查5678端口是否被占用</li>\n<li>运行adb reverse tcp:5678 tcp:5678</li>\n<li>摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单</li>\n<li>点击Debug JS Remote即可连接Redux调试服务器</li>\n</ol>\n"},{"title":"让 Zsh 终端走代理","date":"2017-05-08T07:20:42.000Z","description":"在 ~/.zshrc 配置文件中添加下面一段，以后使用的时候输入 proxy 打开代理模式，关闭代理时输入 noproxy 即可。","_content":"在 ~/.zshrc 配置文件中添加下面一段，以后使用的时候输入 proxy 打开代理模式，关闭代理时输入 noproxy 即可。\n\n```shell\nvim ~/.zshrc\n\n# where proxy\nproxy () {\n  export http_proxy=\"http://127.0.0.1:8087\"\n  export https_proxy=\"http://127.0.0.1:8087\"\n  echo \"HTTP Proxy on\"\n}\n\n# where noproxy\nnoproxy () {\n  unset http_proxy\n  unset https_proxy\n  echo \"HTTP Proxy off\"\n}\n```\n由于本人使用 [XX-Net](https://github.com/XX-net/XX-Net) 作为代理，所以默认代理端口为8087，如果使用其他代理软件请注意修改端口。","source":"_posts/让-Zsh-终端走代理.md","raw":"---\ntitle: 让 Zsh 终端走代理\ndate: 2017-05-08 15:20:42\ndescription: 在 ~/.zshrc 配置文件中添加下面一段，以后使用的时候输入 proxy 打开代理模式，关闭代理时输入 noproxy 即可。\ncategories: \n- Mac\n---\n在 ~/.zshrc 配置文件中添加下面一段，以后使用的时候输入 proxy 打开代理模式，关闭代理时输入 noproxy 即可。\n\n```shell\nvim ~/.zshrc\n\n# where proxy\nproxy () {\n  export http_proxy=\"http://127.0.0.1:8087\"\n  export https_proxy=\"http://127.0.0.1:8087\"\n  echo \"HTTP Proxy on\"\n}\n\n# where noproxy\nnoproxy () {\n  unset http_proxy\n  unset https_proxy\n  echo \"HTTP Proxy off\"\n}\n```\n由于本人使用 [XX-Net](https://github.com/XX-net/XX-Net) 作为代理，所以默认代理端口为8087，如果使用其他代理软件请注意修改端口。","slug":"让-Zsh-终端走代理","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0e001i3ghga4hq8cmi","content":"<p>在 ~/.zshrc 配置文件中添加下面一段，以后使用的时候输入 proxy 打开代理模式，关闭代理时输入 noproxy 即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># where proxy</div><div class=\"line\">proxy () &#123;</div><div class=\"line\">  export http_proxy=\"http://127.0.0.1:8087\"</div><div class=\"line\">  export https_proxy=\"http://127.0.0.1:8087\"</div><div class=\"line\">  echo \"HTTP Proxy on\"</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># where noproxy</div><div class=\"line\">noproxy () &#123;</div><div class=\"line\">  unset http_proxy</div><div class=\"line\">  unset https_proxy</div><div class=\"line\">  echo \"HTTP Proxy off\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于本人使用 <a href=\"https://github.com/XX-net/XX-Net\" target=\"_blank\" rel=\"external\">XX-Net</a> 作为代理，所以默认代理端口为8087，如果使用其他代理软件请注意修改端口。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 ~/.zshrc 配置文件中添加下面一段，以后使用的时候输入 proxy 打开代理模式，关闭代理时输入 noproxy 即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.zshrc</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># where proxy</div><div class=\"line\">proxy () &#123;</div><div class=\"line\">  export http_proxy=\"http://127.0.0.1:8087\"</div><div class=\"line\">  export https_proxy=\"http://127.0.0.1:8087\"</div><div class=\"line\">  echo \"HTTP Proxy on\"</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># where noproxy</div><div class=\"line\">noproxy () &#123;</div><div class=\"line\">  unset http_proxy</div><div class=\"line\">  unset https_proxy</div><div class=\"line\">  echo \"HTTP Proxy off\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于本人使用 <a href=\"https://github.com/XX-net/XX-Net\" target=\"_blank\" rel=\"external\">XX-Net</a> 作为代理，所以默认代理端口为8087，如果使用其他代理软件请注意修改端口。</p>\n"},{"title":"让Finder标题显示当前路径","date":"2017-04-19T02:09:32.000Z","description":"很多情况下，我们都需要知道当前在那个目录，而 Mac 的资源管理器却默认不显示路径，开启的方法也很简单，只要在终端里输入以下命令：","_content":"很多情况下，我们都需要知道当前在那个目录，而 Mac 的资源管理器却默认不显示路径，开启的方法也很简单，只要在终端里输入以下命令：\n```shell\ndefaults write com.apple.finder _FXShowPosixPathInTitle -bool YES killall Finder\n```","source":"_posts/让Finder标题显示当前路径.md","raw":"---\ntitle: 让Finder标题显示当前路径\ndate: 2017-04-19 10:09:32\ndescription: 很多情况下，我们都需要知道当前在那个目录，而 Mac 的资源管理器却默认不显示路径，开启的方法也很简单，只要在终端里输入以下命令：\ncategories: \n- Mac\n---\n很多情况下，我们都需要知道当前在那个目录，而 Mac 的资源管理器却默认不显示路径，开启的方法也很简单，只要在终端里输入以下命令：\n```shell\ndefaults write com.apple.finder _FXShowPosixPathInTitle -bool YES killall Finder\n```","slug":"让Finder标题显示当前路径","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0g001m3ghgw5idow34","content":"<p>很多情况下，我们都需要知道当前在那个目录，而 Mac 的资源管理器却默认不显示路径，开启的方法也很简单，只要在终端里输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES killall Finder</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很多情况下，我们都需要知道当前在那个目录，而 Mac 的资源管理器却默认不显示路径，开启的方法也很简单，只要在终端里输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES killall Finder</div></pre></td></tr></table></figure></p>\n"},{"title":"部署Meteor应用到服务器","date":"2017-01-08T09:56:09.000Z","_content":"","source":"_posts/部署Meteor应用到服务器.md","raw":"---\ntitle: 部署Meteor应用到服务器\ndate: 2017-01-08 17:56:09\ntags:\n- Meteor\ncategories:\n- Backend\n---\n","slug":"部署Meteor应用到服务器","published":1,"updated":"2017-05-10T13:33:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ngpi0h001p3ghg9785ro5z","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cj2ngphz300023ghgi0laqudx","category_id":"cj2ngphzd00053ghgm6g5xnot","_id":"cj2ngphzm000e3ghg6e9yl1of"},{"post_id":"cj2ngphz900043ghgbfwk2zew","category_id":"cj2ngphzj000b3ghg54ehywxd","_id":"cj2ngphzt000l3ghggl0iwcne"},{"post_id":"cj2ngphzm000f3ghgo6t36gw6","category_id":"cj2ngphzd00053ghgm6g5xnot","_id":"cj2ngphzv000p3ghgf8s89mxy"},{"post_id":"cj2ngphzh00073ghg9xmljyt8","category_id":"cj2ngphzj000b3ghg54ehywxd","_id":"cj2ngphzy000t3ghg57m03cgh"},{"post_id":"cj2ngphzu000o3ghg8xh9bezj","category_id":"cj2ngphzj000b3ghg54ehywxd","_id":"cj2ngpi01000x3ghgmplpjhgf"},{"post_id":"cj2ngphzj000a3ghgux1renr6","category_id":"cj2ngphzt000m3ghge2cl4hlw","_id":"cj2ngpi0200103ghgsy6aescm"},{"post_id":"cj2ngpi00000w3ghg7lnh10kh","category_id":"cj2ngphzy000v3ghgqkb4sg2q","_id":"cj2ngpi0500133ghgopvwpqpd"},{"post_id":"cj2ngphzk000c3ghgrgt65eeg","category_id":"cj2ngphzy000v3ghgqkb4sg2q","_id":"cj2ngpi0800163ghgdi2eiagg"},{"post_id":"cj2ngpi02000z3ghgjfdfjhmm","category_id":"cj2ngphzt000m3ghge2cl4hlw","_id":"cj2ngpi09001a3ghg8a50cps3"},{"post_id":"cj2ngpi0300123ghgv2sfww5r","category_id":"cj2ngphzt000m3ghge2cl4hlw","_id":"cj2ngpi0c001e3ghgn89hmi5i"},{"post_id":"cj2ngphzs000k3ghg3jzbij3i","category_id":"cj2ngphzt000m3ghge2cl4hlw","_id":"cj2ngpi0d001h3ghgz65v1nrp"},{"post_id":"cj2ngpi0500143ghg16gcjv66","category_id":"cj2ngphzt000m3ghge2cl4hlw","_id":"cj2ngpi0g001l3ghg2fwd5k8u"},{"post_id":"cj2ngpi0800193ghgpwby3bba","category_id":"cj2ngphzj000b3ghg54ehywxd","_id":"cj2ngpi0h001o3ghgwet0sdmg"},{"post_id":"cj2ngphzx000s3ghgx4jwfu6e","category_id":"cj2ngphzy000v3ghgqkb4sg2q","_id":"cj2ngpi0j001r3ghga0a11cg8"},{"post_id":"cj2ngpi0c001f3ghglb8tu3hh","category_id":"cj2ngphzt000m3ghge2cl4hlw","_id":"cj2ngpi0n001v3ghgqd5zvwom"},{"post_id":"cj2ngpi0e001i3ghga4hq8cmi","category_id":"cj2ngphzd00053ghgm6g5xnot","_id":"cj2ngpi0n001w3ghgu2dkg12c"},{"post_id":"cj2ngpi0g001m3ghgw5idow34","category_id":"cj2ngphzd00053ghgm6g5xnot","_id":"cj2ngpi0o001y3ghgskp4cs1f"},{"post_id":"cj2ngpi0h001p3ghg9785ro5z","category_id":"cj2ngpi0m001t3ghgco230bdh","_id":"cj2ngpi0p00203ghg7lh1comt"}],"PostTag":[{"post_id":"cj2ngphyw00013ghgnw74icgy","tag_id":"cj2ngphz600033ghgp4jsbvpi","_id":"cj2ngphzi00093ghgzmoxjxuc"},{"post_id":"cj2ngphz900043ghgbfwk2zew","tag_id":"cj2ngphzi00083ghgcusiidu4","_id":"cj2ngphzn000g3ghgtx2cg4rc"},{"post_id":"cj2ngphzf00063ghg2jy71r4e","tag_id":"cj2ngphzl000d3ghg8mkkw6tr","_id":"cj2ngphzt000n3ghg8a08t3rw"},{"post_id":"cj2ngphzp000i3ghgpx1r0m0g","tag_id":"cj2ngphzl000d3ghg8mkkw6tr","_id":"cj2ngphzv000q3ghggsc7t1pk"},{"post_id":"cj2ngphzh00073ghg9xmljyt8","tag_id":"cj2ngphzi00083ghgcusiidu4","_id":"cj2ngphzy000u3ghgyz28xt9d"},{"post_id":"cj2ngphzj000a3ghgux1renr6","tag_id":"cj2ngphzw000r3ghgltll6pc0","_id":"cj2ngpi0800183ghgrtpsob8c"},{"post_id":"cj2ngphzj000a3ghgux1renr6","tag_id":"cj2ngpi01000y3ghgd8xheria","_id":"cj2ngpi09001b3ghglws13kto"},{"post_id":"cj2ngphzk000c3ghgrgt65eeg","tag_id":"cj2ngpi0700153ghge0wn3cfo","_id":"cj2ngpi0d001g3ghg0f3qgk0m"},{"post_id":"cj2ngpi0c001f3ghglb8tu3hh","tag_id":"cj2ngphzw000r3ghgltll6pc0","_id":"cj2ngpi0g001k3ghg4ws5jncs"},{"post_id":"cj2ngpi0c001f3ghglb8tu3hh","tag_id":"cj2ngpi01000y3ghgd8xheria","_id":"cj2ngpi0h001n3ghgqfxtu3vi"},{"post_id":"cj2ngphzs000k3ghg3jzbij3i","tag_id":"cj2ngpi0b001d3ghgaqjitd0b","_id":"cj2ngpi0j001q3ghg1c5atz1q"},{"post_id":"cj2ngphzu000o3ghg8xh9bezj","tag_id":"cj2ngpi0f001j3ghg6scs40uk","_id":"cj2ngpi0m001u3ghgp7fcogem"},{"post_id":"cj2ngphzx000s3ghgx4jwfu6e","tag_id":"cj2ngpi0700153ghge0wn3cfo","_id":"cj2ngpi0p00213ghgjx414wq6"},{"post_id":"cj2ngphzx000s3ghgx4jwfu6e","tag_id":"cj2ngpi0o001x3ghgnlob23q2","_id":"cj2ngpi0q00223ghgr2jddlyy"},{"post_id":"cj2ngpi00000w3ghg7lnh10kh","tag_id":"cj2ngpi0700153ghge0wn3cfo","_id":"cj2ngpi0q00253ghgvqmx06xk"},{"post_id":"cj2ngpi00000w3ghg7lnh10kh","tag_id":"cj2ngpi0q00233ghgbzi3xvfc","_id":"cj2ngpi0q00263ghga3rwcxfa"},{"post_id":"cj2ngpi02000z3ghgjfdfjhmm","tag_id":"cj2ngpi0q00243ghg9j0o6kk7","_id":"cj2ngpi0r00283ghgke3qsw0q"},{"post_id":"cj2ngpi0300123ghgv2sfww5r","tag_id":"cj2ngpi0q00243ghg9j0o6kk7","_id":"cj2ngpi0s002a3ghg1ploccru"},{"post_id":"cj2ngpi0500143ghg16gcjv66","tag_id":"cj2ngpi0q00243ghg9j0o6kk7","_id":"cj2ngpi0s002c3ghggr075yb7"},{"post_id":"cj2ngpi0800193ghgpwby3bba","tag_id":"cj2ngpi0f001j3ghg6scs40uk","_id":"cj2ngpi0t002e3ghgbzxmdb69"},{"post_id":"cj2ngpi0a001c3ghg5mtwitsp","tag_id":"cj2ngpi0t002d3ghgbxe1ug3d","_id":"cj2ngpi0t002g3ghgz3gwmvnb"},{"post_id":"cj2ngpi0h001p3ghg9785ro5z","tag_id":"cj2ngpi0t002f3ghgu2ye3x5r","_id":"cj2ngpi0u002h3ghgul66m82s"}],"Tag":[{"name":"Android","_id":"cj2ngphz600033ghgp4jsbvpi"},{"name":"mysql","_id":"cj2ngphzi00083ghgcusiidu4"},{"name":"php","_id":"cj2ngphzl000d3ghg8mkkw6tr"},{"name":"React","_id":"cj2ngphzw000r3ghgltll6pc0"},{"name":"ReactNative","_id":"cj2ngpi01000y3ghgd8xheria"},{"name":"Ubuntu","_id":"cj2ngpi0700153ghge0wn3cfo"},{"name":"html5","_id":"cj2ngpi0b001d3ghgaqjitd0b"},{"name":"mongodb","_id":"cj2ngpi0f001j3ghg6scs40uk"},{"name":"svn","_id":"cj2ngpi0o001x3ghgnlob23q2"},{"name":"git","_id":"cj2ngpi0q00233ghgbzi3xvfc"},{"name":"前端","_id":"cj2ngpi0q00243ghg9j0o6kk7"},{"name":"Githhub","_id":"cj2ngpi0t002d3ghgbxe1ug3d"},{"name":"Meteor","_id":"cj2ngpi0t002f3ghgu2ye3x5r"}]}}